	if (sc) { // These statuses do not reflect any damage (off the target)
		if (sc->data[SC_WHITEIMPRISON] || sc->data[SC_DARKCROW] || sc->data[SC_KYOMU])
			return 0;
	}

	if (ssc) {
		if (ssc->data[SC_HELLS_PLANT])
			return 0;
	}

	if (flag & BF_SHORT) {//Bounces back part of the damage.
		if ( (skill_get_inf2(skill_id, INF2_ISTRAP) || !status_reflect) && sd && sd->bonus.short_weapon_damage_return ) {
			rdamage += damage * sd->bonus.short_weapon_damage_return / 100;
			rdamage = i64max(rdamage, 1);
		} else if( status_reflect && sc && sc->count ) {
			if( sc->data[SC_REFLECTSHIELD] ) {
				struct status_change_entry *sce_d;
				struct block_list *d_bl = NULL;

				if( (sce_d = sc->data[SC_DEVOTION]) && (d_bl = map_id2bl(sce_d->val1)) &&
					((d_bl->type == BL_MER && ((TBL_MER*)d_bl)->master && ((TBL_MER*)d_bl)->master->bl.id == bl->id) ||
					(d_bl->type == BL_PC && ((TBL_PC*)d_bl)->devotion[sce_d->val2] == bl->id)) )
				{ //Don't reflect non-skill attack if has SC_REFLECTSHIELD from Devotion bonus inheritance
					if( (!skill_id && battle_config.devotion_rdamage_skill_only && sc->data[SC_REFLECTSHIELD]->val4) ||
						!check_distance_bl(bl,d_bl,sce_d->val3) )
						return 0;
				}
			}
			if ( sc->data[SC_REFLECTSHIELD] && skill_id != WS_CARTTERMINATION ) {
				// Don't reflect non-skill attack if has SC_REFLECTSHIELD from Devotion bonus inheritance
				if (!skill_id && battle_config.devotion_rdamage_skill_only && sc->data[SC_REFLECTSHIELD]->val4)
					rdamage = 0;
				else {
					rdamage += damage * sc->data[SC_REFLECTSHIELD]->val2 / 100;
					rdamage = i64max(rdamage, 1);
				}
			}

			if (sc->data[SC_DEATHBOUND] && skill_id != WS_CARTTERMINATION && skill_id != GN_HELLS_PLANT_ATK && !status_bl_has_mode(src,MD_STATUSIMMUNE)) {
				if (distance_bl(src,bl) <= 0 || !map_check_dir(map_calc_dir(bl,src->x,src->y), unit_getdir(bl))) {
					int64 rd1 = min(damage, status_get_max_hp(bl)) * sc->data[SC_DEATHBOUND]->val2 / 100; // Amplify damage.

					*dmg = rd1 * 30 / 100; // Received damage = 30% of amplified damage.
					clif_skill_damage(src, bl, gettick(), status_get_amotion(src), 0, -30000, 1, RK_DEATHBOUND, sc->data[SC_DEATHBOUND]->val1, DMG_SINGLE);
					skill_blown(bl, src, skill_get_blewcount(RK_DEATHBOUND, 1), unit_getdir(src), BLOWN_NONE);搜尋 "friend" （找到 496 個結果在 34 的文件中。搜尋文件量： 233）搜尋 "friend" （找到 496 個結果在 34 的文件中。搜尋文件量： 233）
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\char\char.cpp （45 個結果）
	行號 458: 	for(i = 0; i < MAX_FRIENDS; i++){
	行號 459: 		if(p->friends[i].char_id != cp->friends[i].char_id ||
	行號 459: 		if(p->friends[i].char_id != cp->friends[i].char_id ||
	行號 460: 			p->friends[i].account_id != cp->friends[i].account_id){
	行號 460: 			p->friends[i].account_id != cp->friends[i].account_id){
	行號 467: 	{	//Save friends
	行號 468: 		if( SQL_ERROR == Sql_Query(sql_handle, "DELETE FROM `%s` WHERE `char_id`='%d'", schema_config.friend_db, char_id) )
	行號 475: 		StringBuf_Printf(&buf, "INSERT INTO `%s` (`char_id`, `friend_id`) VALUES ", schema_config.friend_db);
	行號 475: 		StringBuf_Printf(&buf, "INSERT INTO `%s` (`char_id`, `friend_id`) VALUES ", schema_config.friend_db);
	行號 476: 		for( i = 0, count = 0; i < MAX_FRIENDS; ++i )
	行號 478: 			if( p->friends[i].char_id > 0 )
	行號 482: 				StringBuf_Printf(&buf, "('%d','%d')", char_id, p->friends[i].char_id);
	行號 494: 		strcat(save_status, " friends");
	行號 1034: 	struct s_friend tmp_friend;
	行號 1034: 	struct s_friend tmp_friend;
	行號 1215: 	//read friends
	行號 1216: 	//`friends` (`char_id`, `friend_id`)
	行號 1216: 	//`friends` (`char_id`, `friend_id`)
	行號 1217: 	if( SQL_ERROR == SqlStmt_Prepare(stmt, "SELECT c.`account_id`, c.`char_id`, c.`name` FROM `%s` c LEFT JOIN `%s` f ON f.`friend_id` = c.`char_id` WHERE f.`char_id`=? LIMIT %d", schema_config.char_db, schema_config.friend_db, MAX_FRIENDS)
	行號 1217: 	if( SQL_ERROR == SqlStmt_Prepare(stmt, "SELECT c.`account_id`, c.`char_id`, c.`name` FROM `%s` c LEFT JOIN `%s` f ON f.`friend_id` = c.`char_id` WHERE f.`char_id`=? LIMIT %d", schema_config.char_db, schema_config.friend_db, MAX_FRIENDS)
	行號 1217: 	if( SQL_ERROR == SqlStmt_Prepare(stmt, "SELECT c.`account_id`, c.`char_id`, c.`name` FROM `%s` c LEFT JOIN `%s` f ON f.`friend_id` = c.`char_id` WHERE f.`char_id`=? LIMIT %d", schema_config.char_db, schema_config.friend_db, MAX_FRIENDS)
	行號 1220: 	||	SQL_ERROR == SqlStmt_BindColumn(stmt, 0, SQLDT_INT,    &tmp_friend.account_id, 0, NULL, NULL)
	行號 1221: 	||	SQL_ERROR == SqlStmt_BindColumn(stmt, 1, SQLDT_INT,    &tmp_friend.char_id, 0, NULL, NULL)
	行號 1222: 	||	SQL_ERROR == SqlStmt_BindColumn(stmt, 2, SQLDT_STRING, &tmp_friend.name, sizeof(tmp_friend.name), NULL, NULL) )
	行號 1222: 	||	SQL_ERROR == SqlStmt_BindColumn(stmt, 2, SQLDT_STRING, &tmp_friend.name, sizeof(tmp_friend.name), NULL, NULL) )
	行號 1225: 	for( i = 0; i < MAX_FRIENDS && SQL_SUCCESS == SqlStmt_NextRow(stmt); ++i )
	行號 1226: 		memcpy(&p->friends[i], &tmp_friend, sizeof(tmp_friend));
	行號 1226: 		memcpy(&p->friends[i], &tmp_friend, sizeof(tmp_friend));
	行號 1226: 		memcpy(&p->friends[i], &tmp_friend, sizeof(tmp_friend));
	行號 1227: 	StringBuf_AppendStr(&msg_buf, " friends");
	行號 1680: 	/* delete char's friends list */
	行號 1681: 	if( SQL_ERROR == Sql_Query(sql_handle, "DELETE FROM `%s` WHERE `char_id` = '%d'", schema_config.friend_db, char_id) )
	行號 1684: 	/* delete char from other's friend list */
	行號 1686: 	if( SQL_ERROR == Sql_Query(sql_handle, "DELETE FROM `%s` WHERE `friend_id` = '%d'", schema_config.friend_db, char_id) )
	行號 1686: 	if( SQL_ERROR == Sql_Query(sql_handle, "DELETE FROM `%s` WHERE `friend_id` = '%d'", schema_config.friend_db, char_id) )
	行號 2325: 		schema_config.party_db, schema_config.pet_db, schema_config.friend_db, schema_config.mail_db, 
	行號 2459: 	//checking friend_db
	行號 2460: 	if( SQL_ERROR == Sql_Query(sql_handle, "SELECT  `char_id`,`friend_id` FROM `%s` LIMIT 1;", schema_config.friend_db) ){
	行號 2460: 	if( SQL_ERROR == Sql_Query(sql_handle, "SELECT  `char_id`,`friend_id` FROM `%s` LIMIT 1;", schema_config.friend_db) ){
	行號 2636: 		else if(!strcmpi(w1,"friend_db"))
	行號 2637: 			safestrncpy(schema_config.friend_db, w2, sizeof(schema_config.friend_db));
	行號 2637: 			safestrncpy(schema_config.friend_db, w2, sizeof(schema_config.friend_db));
	行號 2705: 	safestrncpy(schema_config.friend_db,"friends",sizeof(schema_config.friend_db));
	行號 2705: 	safestrncpy(schema_config.friend_db,"friends",sizeof(schema_config.friend_db));
	行號 2705: 	safestrncpy(schema_config.friend_db,"friends",sizeof(schema_config.friend_db));
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\char\char.hpp （1 個結果）
	行號 75: 	char friend_db[DB_NAME_LEN];
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\char\char_clif.cpp （1 個結果）
	行號 73: 			// Admin is friendly and uses triangle exchange
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\char\char_mapif.cpp （10 個結果）
	行號 660:  * Player requesting to remove friend from list
	行號 661:  * Remove RFIFOL(fd,6) (friend_id) from RFIFOL(fd,2) (char_id) friend list
	行號 661:  * Remove RFIFOL(fd,6) (friend_id) from RFIFOL(fd,2) (char_id) friend list
	行號 666: int chmapif_parse_askrmfriend(int fd){
	行號 670: 		uint32 char_id, friend_id;
	行號 672: 		friend_id = RFIFOL(fd,6);
	行號 673: 		if( SQL_ERROR == Sql_Query(sql_handle, "DELETE FROM `%s` WHERE `char_id`='%d' AND `friend_id`='%d' LIMIT 1",
	行號 674: 			schema_config.friend_db, char_id, friend_id) ) {
	行號 674: 			schema_config.friend_db, char_id, friend_id) ) {
	行號 1414: 			case 0x2b07: next=chmapif_parse_askrmfriend(fd); break;
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\char\char_mapif.hpp （1 個結果）
	行號 24: int chmapif_parse_askrmfriend(int fd);
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\common\db.cpp （1 個結果）
	行號 45:  *  - make the system thread friendly
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\common\mmo.hpp （7 個結果）
	行號 127: #define MAX_FRIENDS 40
	行號 440: 	short intimate;//pet friendly
	行號 500: struct s_friend {
	行號 557: 	struct s_friend friends[MAX_FRIENDS]; //New friend system [Skotlex]
	行號 557: 	struct s_friend friends[MAX_FRIENDS]; //New friend system [Skotlex]
	行號 557: 	struct s_friend friends[MAX_FRIENDS]; //New friend system [Skotlex]
	行號 557: 	struct s_friend friends[MAX_FRIENDS]; //New friend system [Skotlex]
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\achievement.cpp （1 個結果）
	行號 959: 		case AG_ADD_FRIEND:
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\achievement.hpp （1 個結果）
	行號 23: 	AG_ADD_FRIEND,
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\atcommand.cpp （20 個結果）
	行號 3081: ACMD_FUNC(petfriendly) {
	行號 3082: 	int friendly;
	行號 3086: 	if (!message || !*message || (friendly = atoi(message)) < 0) {
	行號 3087: 		clif_displaymessage(fd, msg_txt(sd,1016)); // Please enter a valid value (usage: @petfriendly <0-1000>).
	行號 3097: 	if (friendly < 0 || friendly > 1000)
	行號 3097: 	if (friendly < 0 || friendly > 1000)
	行號 3103: 	if (friendly == pd->pet.intimate) {
	行號 3108: 	pet_set_intimate(pd, friendly);
	行號 7949: ACMD_FUNC(homfriendly)
	行號 7951: 	int friendly = 0;
	行號 7961: 		clif_displaymessage(fd, msg_txt(sd,1258)); // Please enter a friendly value (usage: @homfriendly <friendly value [0-1000]>).
	行號 7961: 		clif_displaymessage(fd, msg_txt(sd,1258)); // Please enter a friendly value (usage: @homfriendly <friendly value [0-1000]>).
	行號 7961: 		clif_displaymessage(fd, msg_txt(sd,1258)); // Please enter a friendly value (usage: @homfriendly <friendly value [0-1000]>).
	行號 7965: 	friendly = atoi(message);
	行號 7966: 	friendly = cap_value(friendly, 0, 1000);
	行號 7966: 	friendly = cap_value(friendly, 0, 1000);
	行號 7968: 	sd->hd->homunculus.intimacy = friendly * 100 ;
	行號 7969: 	clif_send_homdata(sd,SP_INTIMATE,friendly);
	行號 10851: 		ACMD_DEF(petfriendly),
	行號 11019: 		ACMD_DEF(homfriendly),
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\battle.cpp （13 個結果）
	行號 9108:  * (enemy, friend, party, guild, etc)
	行號 9126: 	int strip_enemy = 1; //Flag which marks whether to remove the BCT_ENEMY status if it's also friend/ally.
	行號 9360: 					state |= BCT_PARTY; //Normal mobs with no ai or with AI_WAVEMODE are friends.
	行號 9599: 	{ "pet_friendly_rate",                  &battle_config.pet_friendly_rate,               100,    0,      INT_MAX,        },
	行號 9599: 	{ "pet_friendly_rate",                  &battle_config.pet_friendly_rate,               100,    0,      INT_MAX,        },
	行號 9601: 	{ "pet_hungry_friendly_decrease",       &battle_config.pet_hungry_friendly_decrease,    5,      0,      INT_MAX,        },
	行號 9601: 	{ "pet_hungry_friendly_decrease",       &battle_config.pet_hungry_friendly_decrease,    5,      0,      INT_MAX,        },
	行號 9605: 	{ "pet_support_min_friendly",           &battle_config.pet_support_min_friendly,        900,    0,      950,            },
	行號 9605: 	{ "pet_support_min_friendly",           &battle_config.pet_support_min_friendly,        900,    0,      950,            },
	行號 9847: 	{ "friend_auto_add",                    &battle_config.friend_auto_add,                 1,      0,      1,              },
	行號 9847: 	{ "friend_auto_add",                    &battle_config.friend_auto_add,                 1,      0,      1,              },
	行號 9850: 	{ "homunculus_friendly_rate",           &battle_config.homunculus_friendly_rate,        100,    0,      INT_MAX,        },
	行號 9850: 	{ "homunculus_friendly_rate",           &battle_config.homunculus_friendly_rate,        100,    0,      INT_MAX,        },
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\battle.hpp （8 個結果）
	行號 69: 	BCT_FRIEND		= BCT_NOENEMY,
	行號 224: 	int pet_friendly_rate;
	行號 226: 	int pet_hungry_friendly_decrease;
	行號 230: 	int pet_support_min_friendly;	//[Skotlex]
	行號 475: 	int friend_auto_add; //When accepting friends, both get friended. [Skotlex]
	行號 475: 	int friend_auto_add; //When accepting friends, both get friended. [Skotlex]
	行號 475: 	int friend_auto_add; //When accepting friends, both get friended. [Skotlex]
	行號 479: 	int homunculus_friendly_rate;
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\chrif.cpp （8 個結果）
	行號 68: //2b07: Outgoing, chrif_removefriend -> 'Tell charserver to remove friend_id from char_id friend list'
	行號 68: //2b07: Outgoing, chrif_removefriend -> 'Tell charserver to remove friend_id from char_id friend list'
	行號 68: //2b07: Outgoing, chrif_removefriend -> 'Tell charserver to remove friend_id from char_id friend list'
	行號 1924:  * Asks char server to remove friend_id from the friend list of char_id
	行號 1924:  * Asks char server to remove friend_id from the friend list of char_id
	行號 1926: int chrif_removefriend(uint32 char_id, int friend_id) {
	行號 1926: int chrif_removefriend(uint32 char_id, int friend_id) {
	行號 1933: 	WFIFOL(char_fd,6) = friend_id;
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\chrif.hpp （2 個結果）
	行號 82: int chrif_removefriend(uint32 char_id, int friend_id);
	行號 82: int chrif_removefriend(uint32 char_id, int friend_id);
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\clif.cpp （124 個結果）
	行號 11069: 		map_foreachpc(clif_friendslist_toggle_sub, sd->status.account_id, sd->status.char_id, 1);
	行號 15219: /// Friends List
	行號 15222: /// Toggles a single friend online/offline [Skotlex] (ZC_FRIENDS_STATE).
	行號 15222: /// Toggles a single friend online/offline [Skotlex] (ZC_FRIENDS_STATE).
	行號 15228: void clif_friendslist_toggle(struct map_session_data *sd,uint32 account_id, uint32 char_id, int online)
	行號 15232: 	//Seek friend.
	行號 15233: 	for (i = 0; i < MAX_FRIENDS && sd->status.friends[i].char_id &&
	行號 15233: 	for (i = 0; i < MAX_FRIENDS && sd->status.friends[i].char_id &&
	行號 15234: 		(sd->status.friends[i].char_id != char_id || sd->status.friends[i].account_id != account_id); i++);
	行號 15234: 		(sd->status.friends[i].char_id != char_id || sd->status.friends[i].account_id != account_id); i++);
	行號 15236: 	if(i == MAX_FRIENDS || sd->status.friends[i].char_id == 0)
	行號 15236: 	if(i == MAX_FRIENDS || sd->status.friends[i].char_id == 0)
	行號 15241: 	WFIFOL(fd, 2) = sd->status.friends[i].account_id;
	行號 15242: 	WFIFOL(fd, 6) = sd->status.friends[i].char_id;
	行號 15245: 	safestrncpy(WFIFOCP(fd, 11), sd->status.friends[i].name, NAME_LENGTH);
	行號 15251: //Subfunction called from clif_foreachclient to toggle friends on/off [Skotlex]
	行號 15252: int clif_friendslist_toggle_sub(struct map_session_data *sd,va_list ap)
	行號 15258: 	clif_friendslist_toggle(sd, account_id, char_id, online);
	行號 15263: /// Sends the whole friends list (ZC_FRIENDS_LIST).
	行號 15263: /// Sends the whole friends list (ZC_FRIENDS_LIST).
	行號 15266: void clif_friendslist_send(struct map_session_data *sd)
	行號 15275: 	// Send friends list
	行號 15276: 	WFIFOHEAD(fd, MAX_FRIENDS * size + 4);
	行號 15278: 	for(i = 0; i < MAX_FRIENDS && sd->status.friends[i].char_id; i++) {
	行號 15278: 	for(i = 0; i < MAX_FRIENDS && sd->status.friends[i].char_id; i++) {
	行號 15279: 		WFIFOL(fd, 4 + size * i + 0) = sd->status.friends[i].account_id;
	行號 15280: 		WFIFOL(fd, 4 + size * i + 4) = sd->status.friends[i].char_id;
	行號 15282: 		safestrncpy(WFIFOCP(fd, 4 + size * i + 8), sd->status.friends[i].name, NAME_LENGTH);
	行號 15292: 		if (map_charid2sd(sd->status.friends[n].char_id))
	行號 15293: 			clif_friendslist_toggle(sd, sd->status.friends[n].account_id, sd->status.friends[n].char_id, 1);
	行號 15293: 			clif_friendslist_toggle(sd, sd->status.friends[n].account_id, sd->status.friends[n].char_id, 1);
	行號 15293: 			clif_friendslist_toggle(sd, sd->status.friends[n].account_id, sd->status.friends[n].char_id, 1);
	行號 15298: /// Notification about the result of a friend add request (ZC_ADD_FRIENDS_LIST).
	行號 15298: /// Notification about the result of a friend add request (ZC_ADD_FRIENDS_LIST).
	行號 15301: ///     0 = MsgStringTable[821]="You have become friends with (%s)."
	行號 15302: ///     1 = MsgStringTable[822]="(%s) does not want to be friends with you."
	行號 15303: ///     2 = MsgStringTable[819]="Your Friend List is full."
	行號 15304: ///     3 = MsgStringTable[820]="(%s)'s Friend List is full."
	行號 15305: void clif_friendslist_reqack(struct map_session_data *sd, struct map_session_data *f_sd, int type)
	行號 15323: /// Asks a player for permission to be added as friend (ZC_REQ_ADD_FRIENDS).
	行號 15323: /// Asks a player for permission to be added as friend (ZC_REQ_ADD_FRIENDS).
	行號 15325: void clif_friendlist_req(struct map_session_data* sd, uint32 account_id, uint32 char_id, const char* name)
	行號 15338: /// Request to add a player as friend (CZ_ADD_FRIENDS).
	行號 15338: /// Request to add a player as friend (CZ_ADD_FRIENDS).
	行號 15340: void clif_parse_FriendsListAdd(int fd, struct map_session_data *sd)
	行號 15347: 	// Friend doesn't exist (no player with this name)
	行號 15353: 	if( sd->bl.id == f_sd->bl.id ) {// adding oneself as friend
	行號 15357: 	// ensure that the request player's friend list is not full
	行號 15358: 	ARR_FIND(0, MAX_FRIENDS, i, sd->status.friends[i].char_id == 0);
	行號 15358: 	ARR_FIND(0, MAX_FRIENDS, i, sd->status.friends[i].char_id == 0);
	行號 15360: 	if( i == MAX_FRIENDS ){
	行號 15361: 		clif_friendslist_reqack(sd, f_sd, 2);
	行號 15371: 	// Friend already exists
	行號 15372: 	for (i = 0; i < MAX_FRIENDS && sd->status.friends[i].char_id != 0; i++) {
	行號 15372: 	for (i = 0; i < MAX_FRIENDS && sd->status.friends[i].char_id != 0; i++) {
	行號 15373: 		if (sd->status.friends[i].char_id == f_sd->status.char_id) {
	行號 15374: 			clif_displaymessage(fd, msg_txt(sd,671)); //"Friend already exists."
	行號 15379: 	f_sd->friend_req = sd->status.char_id;
	行號 15380: 	sd->friend_req   = f_sd->status.char_id;
	行號 15382: 	clif_friendlist_req(f_sd, sd->status.account_id, sd->status.char_id, sd->status.name);
	行號 15386: /// Answer to a friend add request (CZ_ACK_REQ_ADD_FRIENDS).
	行號 15386: /// Answer to a friend add request (CZ_ACK_REQ_ADD_FRIENDS).
	行號 15392: void clif_parse_FriendsListReply(int fd, struct map_session_data *sd)
	行號 15407: 	if( sd->bl.id == account_id ) {// adding oneself as friend
	行號 15415: 	if (reply == 0 || !( sd->friend_req == f_sd->status.char_id && f_sd->friend_req == sd->status.char_id ) )
	行號 15415: 	if (reply == 0 || !( sd->friend_req == f_sd->status.char_id && f_sd->friend_req == sd->status.char_id ) )
	行號 15416: 		clif_friendslist_reqack(f_sd, sd, 1);
	行號 15420: 		for (i = 0; i < MAX_FRIENDS; i++)
	行號 15421: 			if (f_sd->status.friends[i].char_id == 0)
	行號 15423: 		if (i == MAX_FRIENDS) {
	行號 15424: 			clif_friendslist_reqack(f_sd, sd, 2);
	行號 15428: 		f_sd->status.friends[i].account_id = sd->status.account_id;
	行號 15429: 		f_sd->status.friends[i].char_id = sd->status.char_id;
	行號 15430: 		safestrncpy(f_sd->status.friends[i].name, sd->status.name, NAME_LENGTH);
	行號 15431: 		clif_friendslist_reqack(f_sd, sd, 0);
	行號 15433: 		achievement_update_objective(f_sd, AG_ADD_FRIEND, 1, i + 1);
	行號 15435: 		if (battle_config.friend_auto_add) {
	行號 15436: 			// Also add f_sd to sd's friendlist.
	行號 15437: 			for (i = 0; i < MAX_FRIENDS; i++) {
	行號 15438: 				if (sd->status.friends[i].char_id == f_sd->status.char_id)
	行號 15440: 				if (sd->status.friends[i].char_id == 0)
	行號 15443: 			if (i == MAX_FRIENDS) {
	行號 15444: 				clif_friendslist_reqack(sd, f_sd, 2);
	行號 15448: 			sd->status.friends[i].account_id = f_sd->status.account_id;
	行號 15449: 			sd->status.friends[i].char_id = f_sd->status.char_id;
	行號 15450: 			safestrncpy(sd->status.friends[i].name, f_sd->status.name, NAME_LENGTH);
	行號 15451: 			clif_friendslist_reqack(sd, f_sd, 0);
	行號 15453: 			achievement_update_objective(sd, AG_ADD_FRIEND, 1, i + 1);
	行號 15459: /// Request to delete a friend (CZ_DELETE_FRIENDS).
	行號 15459: /// Request to delete a friend (CZ_DELETE_FRIENDS).
	行號 15461: void clif_parse_FriendsListRemove(int fd, struct map_session_data *sd)
	行號 15471: 	// Search friend
	行號 15472: 	for (i = 0; i < MAX_FRIENDS &&
	行號 15473: 		(sd->status.friends[i].char_id != char_id || sd->status.friends[i].account_id != account_id); i++);
	行號 15473: 		(sd->status.friends[i].char_id != char_id || sd->status.friends[i].account_id != account_id); i++);
	行號 15475: 	if (i == MAX_FRIENDS) {
	行號 15480: 	//remove from friend's list first
	行號 15482: 		for (i = 0; i < MAX_FRIENDS &&
	行號 15483: 			(f_sd->status.friends[i].char_id != sd->status.char_id || f_sd->status.friends[i].account_id != sd->status.account_id); i++);
	行號 15483: 			(f_sd->status.friends[i].char_id != sd->status.char_id || f_sd->status.friends[i].account_id != sd->status.account_id); i++);
	行號 15485: 		if (i != MAX_FRIENDS) {
	行號 15487: 			for(j = i + 1; j < MAX_FRIENDS; j++)
	行號 15488: 				memcpy(&f_sd->status.friends[j-1], &f_sd->status.friends[j], sizeof(f_sd->status.friends[0]));
	行號 15488: 				memcpy(&f_sd->status.friends[j-1], &f_sd->status.friends[j], sizeof(f_sd->status.friends[0]));
	行號 15488: 				memcpy(&f_sd->status.friends[j-1], &f_sd->status.friends[j], sizeof(f_sd->status.friends[0]));
	行號 15490: 			memset(&f_sd->status.friends[MAX_FRIENDS-1], 0, sizeof(f_sd->status.friends[MAX_FRIENDS-1]));
	行號 15490: 			memset(&f_sd->status.friends[MAX_FRIENDS-1], 0, sizeof(f_sd->status.friends[MAX_FRIENDS-1]));
	行號 15490: 			memset(&f_sd->status.friends[MAX_FRIENDS-1], 0, sizeof(f_sd->status.friends[MAX_FRIENDS-1]));
	行號 15490: 			memset(&f_sd->status.friends[MAX_FRIENDS-1], 0, sizeof(f_sd->status.friends[MAX_FRIENDS-1]));
	行號 15499: 	} else { //friend not online -- ask char server to delete from his friendlist
	行號 15499: 	} else { //friend not online -- ask char server to delete from his friendlist
	行號 15500: 		if(chrif_removefriend(char_id,sd->status.char_id)) { // char-server offline, abort
	行號 15507: 	for (i = 0; i < MAX_FRIENDS &&
	行號 15508: 		(sd->status.friends[i].char_id != char_id || sd->status.friends[i].account_id != account_id); i++);
	行號 15508: 		(sd->status.friends[i].char_id != char_id || sd->status.friends[i].account_id != account_id); i++);
	行號 15510: 	for(j = i + 1; j < MAX_FRIENDS; j++)
	行號 15511: 		memcpy(&sd->status.friends[j-1], &sd->status.friends[j], sizeof(sd->status.friends[0]));
	行號 15511: 		memcpy(&sd->status.friends[j-1], &sd->status.friends[j], sizeof(sd->status.friends[0]));
	行號 15511: 		memcpy(&sd->status.friends[j-1], &sd->status.friends[j], sizeof(sd->status.friends[0]));
	行號 15513: 	memset(&sd->status.friends[MAX_FRIENDS-1], 0, sizeof(sd->status.friends[MAX_FRIENDS-1]));
	行號 15513: 	memset(&sd->status.friends[MAX_FRIENDS-1], 0, sizeof(sd->status.friends[MAX_FRIENDS-1]));
	行號 15513: 	memset(&sd->status.friends[MAX_FRIENDS-1], 0, sizeof(sd->status.friends[MAX_FRIENDS-1]));
	行號 15513: 	memset(&sd->status.friends[MAX_FRIENDS-1], 0, sizeof(sd->status.friends[MAX_FRIENDS-1]));
	行號 15514: 	clif_displaymessage(fd, msg_txt(sd,674)); //"Friend removed"
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\clif.hpp （4 個結果）
	行號 887: //friends list
	行號 888: int clif_friendslist_toggle_sub(struct map_session_data *sd,va_list ap);
	行號 889: void clif_friendslist_send(struct map_session_data *sd);
	行號 890: void clif_friendslist_reqack(struct map_session_data *sd, struct map_session_data *f_sd, int type);
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\clif_packetdb.hpp （10 個結果）
	行號 422: 	parseable_packet(0x0202,26,clif_parse_FriendsListAdd,2);
	行號 423: 	parseable_packet(0x0203,10,clif_parse_FriendsListRemove,2,6);
	行號 428: 	parseable_packet(0x0208,11,clif_parse_FriendsListReply,2,6,10);
	行號 445: 	parseable_packet(0x0208,14,clif_parse_FriendsListReply,2,6,10);
	行號 1831: 	parseable_packet(0x0436,26,clif_parse_FriendsListAdd,2);
	行號 1865: 	parseable_packet(0x0369,26,clif_parse_FriendsListAdd,2);
	行號 1890: 	parseable_packet(0x089c,26,clif_parse_FriendsListAdd,2);
	行號 1973: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 2039: 	parseable_packet(0x086f,26,clif_parse_FriendsListAdd,2);
	行號 2372: 	packet(0x0206,35); // ZC_FRIENDS_STATE
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\clif_shuffle.hpp （153 個結果）
	行號 35: 	parseable_packet(0x0962,26,clif_parse_FriendsListAdd,2);
	行號 41: 	parseable_packet(0x0362,26,clif_parse_FriendsListAdd,2);
	行號 79: 	parseable_packet(0x0877,26,clif_parse_FriendsListAdd,2);
	行號 104: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 159: 	parseable_packet(0x0940,26,clif_parse_FriendsListAdd,2);
	行號 189: 	parseable_packet(0x0953,26,clif_parse_FriendsListAdd,2);
	行號 217: 	parseable_packet(0x08AB,26,clif_parse_FriendsListAdd,2);
	行號 230: 	parseable_packet(0x0360,26,clif_parse_FriendsListAdd,2);
	行號 259: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 292: 	parseable_packet(0x0863,26,clif_parse_FriendsListAdd,2);
	行號 321: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 352: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 407: 	parseable_packet(0x094B,26,clif_parse_FriendsListAdd,2);
	行號 434: 	parseable_packet(0x091a,26,clif_parse_FriendsListAdd,2);
	行號 466: 	parseable_packet(0x087c,26,clif_parse_FriendsListAdd,2);
	行號 497: 	parseable_packet(0x0868,26,clif_parse_FriendsListAdd,2);
	行號 532: 	parseable_packet(0x0963,26,clif_parse_FriendsListAdd,2);
	行號 538: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 590: 	parseable_packet(0x0946,26,clif_parse_FriendsListAdd,2);
	行號 614: 	parseable_packet(0x08a6,26,clif_parse_FriendsListAdd,2);
	行號 652: 	parseable_packet(0x0940,26,clif_parse_FriendsListAdd,2);
	行號 686: 	parseable_packet(0x0953,26,clif_parse_FriendsListAdd,2);
	行號 693: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 748: 	parseable_packet(0x093d,26,clif_parse_FriendsListAdd,2);
	行號 780: 	parseable_packet(0x0958,26,clif_parse_FriendsListAdd,2);
	行號 805: 	parseable_packet(0x08A8,26,clif_parse_FriendsListAdd,2);
	行號 817: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 873: 	parseable_packet(0x094e,26,clif_parse_FriendsListAdd,2);
	行號 896: 	parseable_packet(0x0865,26,clif_parse_FriendsListAdd,2);
	行號 919: 	parseable_packet(0x088d,26,clif_parse_FriendsListAdd,2);
	行號 950: 	parseable_packet(0x089E,26,clif_parse_FriendsListAdd,2);
	行號 972: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 1017: 	parseable_packet(0x0811,26,clif_parse_FriendsListAdd,2);
	行號 1033: 	parseable_packet(0x0817,26,clif_parse_FriendsListAdd,2);
	行號 1088: 	parseable_packet(0x086A,26,clif_parse_FriendsListAdd,2);
	行號 1096: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 1127: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 1166: 	parseable_packet(0x07EC,26,clif_parse_FriendsListAdd,2);
	行號 1206: 	parseable_packet(0x0871,26,clif_parse_FriendsListAdd,2);
	行號 1237: 	parseable_packet(0x0921,26,clif_parse_FriendsListAdd,2);
	行號 1264: 	parseable_packet(0x0899,26,clif_parse_FriendsListAdd,2);
	行號 1282: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 1339: 	parseable_packet(0x0964,26,clif_parse_FriendsListAdd,2);
	行號 1363: 	parseable_packet(0x091D,26,clif_parse_FriendsListAdd,2);
	行號 1394: 	parseable_packet(0x091b,26,clif_parse_FriendsListAdd,2);
	行號 1429: 	parseable_packet(0x08a0,26,clif_parse_FriendsListAdd,2);
	行號 1449: 	parseable_packet(0x0899,26,clif_parse_FriendsListAdd,2);
	行號 1468: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 1524: 	parseable_packet(0x0961,26,clif_parse_FriendsListAdd,2);
	行號 1530: 	parseable_packet(0x0361,26,clif_parse_FriendsListAdd,2);
	行號 1585: 	parseable_packet(0x0870,26,clif_parse_FriendsListAdd,2);
	行號 1595: 	parseable_packet(0x0870,26,clif_parse_FriendsListAdd,2);
	行號 1641: 	parseable_packet(0x08a9,26,clif_parse_FriendsListAdd,2);
	行號 1656: 	parseable_packet(0x085b,26,clif_parse_FriendsListAdd,2);
	行號 1685: 	parseable_packet(0x0361,26,clif_parse_FriendsListAdd,2);
	行號 1716: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 1747: 	parseable_packet(0x0365,26,clif_parse_FriendsListAdd,2);
	行號 1803: 	parseable_packet(0x093b,26,clif_parse_FriendsListAdd,2);
	行號 1814: 	parseable_packet(0x0878,26,clif_parse_FriendsListAdd,2);
	行號 1864: 	parseable_packet(0x0945,26,clif_parse_FriendsListAdd,2);
	行號 1894: 	parseable_packet(0x0935,26,clif_parse_FriendsListAdd,2);
	行號 1902: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 1957: 	parseable_packet(0x0952,26,clif_parse_FriendsListAdd,2);
	行號 1985: 	parseable_packet(0x0894,26,clif_parse_FriendsListAdd,2);
	行號 2019: 	parseable_packet(0x08a9,26,clif_parse_FriendsListAdd,2);
	行號 2050: 	parseable_packet(0x0951,26,clif_parse_FriendsListAdd,2);
	行號 2066: 	parseable_packet(0x0817,26,clif_parse_FriendsListAdd,2);
	行號 2113: 	parseable_packet(0x0969,26,clif_parse_FriendsListAdd,2);
	行號 2117: 	parseable_packet(0x0281,26,clif_parse_FriendsListAdd,2);
	行號 2159: 	parseable_packet(0x0890,26,clif_parse_FriendsListAdd,2);
	行號 2202: 	parseable_packet(0x094a,26,clif_parse_FriendsListAdd,2);
	行號 2216: 	parseable_packet(0x0884,26,clif_parse_FriendsListAdd,2);
	行號 2264: 	parseable_packet(0x0939,26,clif_parse_FriendsListAdd,2);
	行號 2292: 	parseable_packet(0x092a,26,clif_parse_FriendsListAdd,2);
	行號 2306: 	parseable_packet(0x0363,26,clif_parse_FriendsListAdd,2);
	行號 2344: 	parseable_packet(0x0895,26,clif_parse_FriendsListAdd,2);
	行號 2377: 	parseable_packet(0x0888,26,clif_parse_FriendsListAdd,2);
	行號 2411: 	parseable_packet(0x092c,26,clif_parse_FriendsListAdd,2);
	行號 2429: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 2476: 	parseable_packet(0x0928,26,clif_parse_FriendsListAdd,2);
	行號 2491: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 2544: 	parseable_packet(0x094e,26,clif_parse_FriendsListAdd,2);
	行號 2568: 	parseable_packet(0x0931,26,clif_parse_FriendsListAdd,2);
	行號 2588: 	parseable_packet(0x0819,26,clif_parse_FriendsListAdd,2);
	行號 2640: 	parseable_packet(0x0963,26,clif_parse_FriendsListAdd,2);
	行號 2660: 	parseable_packet(0x0898,26,clif_parse_FriendsListAdd,2);
	行號 2695: 	parseable_packet(0x0928,26,clif_parse_FriendsListAdd,2);
	行號 2730: 	parseable_packet(0x0937,26,clif_parse_FriendsListAdd,2);
	行號 2739: 	parseable_packet(0x0835,26,clif_parse_FriendsListAdd,2);
	行號 2790: 	parseable_packet(0x0941,26,clif_parse_FriendsListAdd,2);
	行號 2826: 	parseable_packet(0x0959,26,clif_parse_FriendsListAdd,2);
	行號 2845: 	parseable_packet(0x0867,26,clif_parse_FriendsListAdd,2);
	行號 2881: 	parseable_packet(0x0862,26,clif_parse_FriendsListAdd,2);
	行號 2911: 	parseable_packet(0x0928,26,clif_parse_FriendsListAdd,2);
	行號 2944: 	parseable_packet(0x091c,26,clif_parse_FriendsListAdd,2);
	行號 2977: 	parseable_packet(0x085a,26,clif_parse_FriendsListAdd,2);
	行號 3001: 	parseable_packet(0x0877,26,clif_parse_FriendsListAdd,2);
	行號 3043: 	parseable_packet(0x0962,26,clif_parse_FriendsListAdd,2);
	行號 3066: 	parseable_packet(0x0920,26,clif_parse_FriendsListAdd,2);
	行號 3099: 	parseable_packet(0x0919,26,clif_parse_FriendsListAdd,2);
	行號 3129: 	parseable_packet(0x0892,26,clif_parse_FriendsListAdd,2);
	行號 3146: 	parseable_packet(0x0876,26,clif_parse_FriendsListAdd,2);
	行號 3185: 	parseable_packet(0x085f,26,clif_parse_FriendsListAdd,2);
	行號 3217: 	parseable_packet(0x08a0,26,clif_parse_FriendsListAdd,2);
	行號 3235: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 3274: 	parseable_packet(0x0872,26,clif_parse_FriendsListAdd,2);
	行號 3297: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 3351: 	parseable_packet(0x0939,26,clif_parse_FriendsListAdd,2);
	行號 3379: 	parseable_packet(0x086f,26,clif_parse_FriendsListAdd,2);
	行號 3408: 	parseable_packet(0x0942,26,clif_parse_FriendsListAdd,2);
	行號 3441: 	parseable_packet(0x093a,26,clif_parse_FriendsListAdd,2);
	行號 3476: 	parseable_packet(0x0958,26,clif_parse_FriendsListAdd,2);
	行號 3507: 	parseable_packet(0x093c,26,clif_parse_FriendsListAdd,2);
	行號 3539: 	parseable_packet(0x0960,26,clif_parse_FriendsListAdd,2);
	行號 3570: 	parseable_packet(0x0967,26,clif_parse_FriendsListAdd,2);
	行號 3581: 	parseable_packet(0x0861,26,clif_parse_FriendsListAdd,2);
	行號 3616: 	parseable_packet(0x0885,26,clif_parse_FriendsListAdd,2);
	行號 3646: 	parseable_packet(0x0867,26,clif_parse_FriendsListAdd,2);
	行號 3677: 	parseable_packet(0x07E4,26,clif_parse_FriendsListAdd,2);
	行號 3700: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 3746: 	parseable_packet(0x0886,26,clif_parse_FriendsListAdd,2);
	行號 3762: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 3818: 	parseable_packet(0x0946,26,clif_parse_FriendsListAdd,2);
	行號 3839: 	parseable_packet(0x091D,26,clif_parse_FriendsListAdd,2);
	行號 3879: 	parseable_packet(0x094F,26,clif_parse_FriendsListAdd,2);
	行號 3900: 	parseable_packet(0x08A3,26,clif_parse_FriendsListAdd,2);
	行號 3943: 	parseable_packet(0x08AC,26,clif_parse_FriendsListAdd,2);
	行號 3969: 	parseable_packet(0x0939,26,clif_parse_FriendsListAdd,2);
	行號 4002: 	parseable_packet(0x08A3,26,clif_parse_FriendsListAdd,2);
	行號 4012: 	parseable_packet(0x035F,26,clif_parse_FriendsListAdd,2);
	行號 4046: 	parseable_packet(0x0861,26,clif_parse_FriendsListAdd,2);
	行號 4098: 	parseable_packet(0x094B,26,clif_parse_FriendsListAdd,2);
	行號 4122: 	parseable_packet(0x0899,26,clif_parse_FriendsListAdd,2);
	行號 4159: 	parseable_packet(0x087B,26,clif_parse_FriendsListAdd,2);
	行號 4192: 	parseable_packet(0x094A,26,clif_parse_FriendsListAdd,2);
	行號 4199: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 4236: 	parseable_packet(0x0872,26,clif_parse_FriendsListAdd,2);
	行號 4267: 	parseable_packet(0x0878,26,clif_parse_FriendsListAdd,2);
	行號 4299: 	parseable_packet(0x0802,26,clif_parse_FriendsListAdd,2);
	行號 4346: 	parseable_packet(0x0946,26,clif_parse_FriendsListAdd,2);
	行號 4355: 	parseable_packet(0x0363,26,clif_parse_FriendsListAdd,2);
	行號 4404: 	parseable_packet(0x091D,26,clif_parse_FriendsListAdd,2);
	行號 4429: 	parseable_packet(0x0802,26,clif_parse_FriendsListAdd,2);
	行號 4471: 	parseable_packet(0x0957,26,clif_parse_FriendsListAdd,2);
	行號 4502: 	parseable_packet(0x0946,26,clif_parse_FriendsListAdd,2);
	行號 4517: 	parseable_packet(0x0899,26,clif_parse_FriendsListAdd,2);
	行號 4540: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 4591: 	parseable_packet(0x0919,26,clif_parse_FriendsListAdd,2);
	行號 4623: 	parseable_packet(0x0881,26,clif_parse_FriendsListAdd,2);
	行號 4649: 	parseable_packet(0x0917,26,clif_parse_FriendsListAdd,2);
	行號 4664: 	parseable_packet(0x0436,26,clif_parse_FriendsListAdd,2);
	行號 4707: 	parseable_packet(0x08AA,26,clif_parse_FriendsListAdd,2);
	行號 4724: 	parseable_packet(0x0202,26,clif_parse_FriendsListAdd,2);
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\homunculus.cpp （2 個結果）
	行號 794: 	if (battle_config.homunculus_friendly_rate != 100)
	行號 795: 		value = (value * battle_config.homunculus_friendly_rate) / 100;
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\mob.cpp （38 個結果）
	行號 3586:  * Friendly Mob whose HP is decreasing by a nearby MOB is looked for.
	行號 3588: int mob_getfriendhprate_sub(struct block_list *bl,va_list ap)
	行號 3602: 	if ((*fr) != NULL) //A friend was already found.
	行號 3614: static struct block_list *mob_getfriendhprate(struct mob_data *md,int min_rate,int max_rate)
	行號 3624: 	map_foreachinallrange(mob_getfriendhprate_sub, &md->bl, 8, type,md,min_rate,max_rate,&fr);
	行號 3644: int mob_getfriendstatus_sub(struct block_list *bl,va_list ap)
	行號 3670: 	if( flag^( cond1==MSC_FRIENDSTATUSOFF ) )
	行號 3676: struct mob_data *mob_getfriendstatus(struct mob_data *md,int cond1,int cond2)
	行號 3681: 	map_foreachinallrange(mob_getfriendstatus_sub, &md->bl, 8,BL_MOB, md,cond1,cond2,&fr);
	行號 3708: 	struct block_list *fbl = NULL; //Friend bl, which can either be a BL_PC or BL_MOB depending on the situation. [Skotlex]
	行號 3778: 				case MSC_FRIENDHPLTMAXRATE:	// friend HP < maxhp%
	行號 3778: 				case MSC_FRIENDHPLTMAXRATE:	// friend HP < maxhp%
	行號 3779: 					flag = ((fbl = mob_getfriendhprate(md, 0, ms[i]->cond2)) != NULL); break;
	行號 3780: 				case MSC_FRIENDHPINRATE	:
	行號 3781: 					flag = ((fbl = mob_getfriendhprate(md, ms[i]->cond2, ms[i]->val[0])) != NULL); break;
	行號 3782: 				case MSC_FRIENDSTATUSON:	// friend status[num] on
	行號 3782: 				case MSC_FRIENDSTATUSON:	// friend status[num] on
	行號 3783: 				case MSC_FRIENDSTATUSOFF:	// friend status[num] off
	行號 3783: 				case MSC_FRIENDSTATUSOFF:	// friend status[num] off
	行號 3784: 					flag = ((fmd = mob_getfriendstatus(md, ms[i]->cond1, ms[i]->cond2)) != NULL); break;
	行號 3835: 				case MST_FRIEND:
	行號 3877: 				case MST_FRIEND:
	行號 4014: 	else if (flag&1) //Friendly Character, remove looting.
	行號 4095: 					ms->target = MST_FRIEND;
	行號 4096: 					ms->cond1 = MSC_FRIENDHPLTMAXRATE;
	行號 4119: 				ms->target = MST_FRIEND;
	行號 4120: 				ms->cond1 = MSC_FRIENDHPLTMAXRATE;
	行號 4172: 		if (flag&1) //Friendly Character
	行號 5747: 		{ "friendhpltmaxrate", MSC_FRIENDHPLTMAXRATE },
	行號 5747: 		{ "friendhpltmaxrate", MSC_FRIENDHPLTMAXRATE },
	行號 5748: 		{ "friendhpinrate",    MSC_FRIENDHPINRATE    },
	行號 5748: 		{ "friendhpinrate",    MSC_FRIENDHPINRATE    },
	行號 5751: 		{ "friendstatuson",    MSC_FRIENDSTATUSON    },
	行號 5751: 		{ "friendstatuson",    MSC_FRIENDSTATUSON    },
	行號 5752: 		{ "friendstatusoff",   MSC_FRIENDSTATUSOFF   },
	行號 5752: 		{ "friendstatusoff",   MSC_FRIENDSTATUSOFF   },
	行號 5785: 		{	"friend",	MST_FRIEND	},
	行號 5785: 		{	"friend",	MST_FRIEND	},
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\mob.hpp （6 個結果）
	行號 34: //Min time before mobs do a check to call nearby friends for help (or for slaves to support their master)
	行號 395: 	MST_FRIEND,
	行號 412: 	MSC_FRIENDHPLTMAXRATE,
	行號 413: 	MSC_FRIENDHPINRATE,
	行號 416: 	MSC_FRIENDSTATUSON,
	行號 417: 	MSC_FRIENDSTATUSOFF,
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\party.cpp （4 個結果）
	行號 1001: 						0,0,skill_get_time(SG_FRIEND, 1));
	行號 1007: 					&& pc_checkskill(p_sd,SG_FRIEND)) {
	行號 1009: 						50+50*pc_checkskill(p_sd,SG_FRIEND), //+100/150/200% rate
	行號 1010: 						0,0,skill_get_time(SG_FRIEND, 1));
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\pc.cpp （2 個結果）
	行號 1764: 	// Send friends list
	行號 1765: 	clif_friendslist_send(sd);
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\pc.hpp （2 個結果）
	行號 778: 	 * Guarantees your friend request is legit (for bugreport:4629)
	行號 780: 	int friend_req;
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\pet.cpp （3 個結果）
	行號 750: 		pd->pet.intimate < battle_config.pet_support_min_friendly ||
	行號 1612: 		if( battle_config.pet_friendly_rate != 100 )
	行號 1613: 			k = (pet_db_ptr->r_hungry * battle_config.pet_friendly_rate) / 100;
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\pet.hpp （2 個結果）
	行號 45: 	uint16 attack_rate; ///< Rate of which the pet will attack (requires at least pet_support_min_friendly intimacy).
	行號 46: 	uint16 defence_attack_rate; ///< Rate of which the pet will retaliate when master is being attacked (requires at least pet_support_min_friendly intimacy).
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\script.cpp （2 個結果）
	行號 15337:  * 3:friendly 4:hungry, 5: rename flag.6:level,
	行號 15375:  * 3:friendly 4:hungry, 5: rename flag.
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\script_constants.hpp （4 個結果）
	行號 2910: 	export_constant(EFST_FRIEND);
	行號 2911: 	export_constant(EFST_FRIENDUP);
	行號 5619: 	export_constant(AG_ADD_FRIEND);
	行號 8855: 	export_constant(BCT_FRIEND);
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\skill.cpp （6 個結果）
	行號 1263: 		else if (sc->data[SC_READYCOUNTER]) { //additional chance from SG_FRIEND [Komurka]
	行號 1387: 						rate += rate * (20 * pc_checkskill(sd, WH_NATUREFRIENDLY)) / 100;
	行號 3286: 			if (sd->status.party_id > 0) //bonus from SG_FRIEND [Komurka]
	行號 3733: 		case TK_COUNTER: {	//bonus from SG_FRIEND [Komurka]
	行號 3735: 			if( sd && sd->status.party_id > 0 && (level = pc_checkskill(sd,SG_FRIEND)) )
	行號 12893: 	// Jump Kick can still fail even though you can jump to friendly targets.
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\skill.hpp （4 個結果）
	行號 156: 	UF_NOENEMY,	// If 'defunit_not_enemy' is set, the target is changed to 'friend'
	行號 258: 	uint16 inf;									///< Inf: 0- passive, 1- enemy, 2- place, 4- self, 16- friend, 32- trap
	行號 1157: 	SG_FRIEND,
	行號 2130: 	WH_NATUREFRIENDLY,
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\status.cpp （3 個結果）
	行號 1319: 	add_sc( SG_FRIEND		, SC_SKILLRATE_UP	);
	行號 4532: 	pd->rate_fix = min(1000 * (pd->pet.intimate - battle_config.pet_support_min_friendly) / (1000 - battle_config.pet_support_min_friendly) + 500, USHRT_MAX);
	行號 4532: 	pd->rate_fix = min(1000 * (pd->pet.intimate - battle_config.pet_support_min_friendly) / (1000 - battle_config.pet_support_min_friendly) + 500, USHRT_MAX);
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\status.hpp （2 個結果）
	行號 1426: 	EFST_FRIEND,
	行號 1427: 	EFST_FRIENDUP,
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\map\unit.cpp （2 個結果）
	行號 3434: 			// Notify friends that this char logged out. [Skotlex]
	行號 3435: 			map_foreachpc(clif_friendslist_toggle_sub, sd->status.account_id, sd->status.char_id, 0);
  C:\Users\nyo\Desktop\ROserver\HGRO-20220107\rathena\src\tool\csv2yaml.cpp （4 個結果）
	行號 732: 		// pet_hungry_friendly_decrease battle_conf
	行號 2214: 			if (it_unit->second.target_str.compare("noenemy") == 0 || it_unit->second.target_str.compare("friend") == 0)
	行號 2215: 				body << YAML::Key << "Target" << YAML::Value << "Friend";
	行號 2216: 			//else if (it_unit->second.target_str.compare("noenemy") == 0) // Same as Friend

  C:\Users\nyo\Desktop\4CrAM-Tier3\src\char\char.cpp （45 個結果）
	行號 454: 	for(i = 0; i < MAX_FRIENDS; i++){
	行號 455: 		if(p->friends[i].char_id != cp->friends[i].char_id ||
	行號 455: 		if(p->friends[i].char_id != cp->friends[i].char_id ||
	行號 456: 			p->friends[i].account_id != cp->friends[i].account_id){
	行號 456: 			p->friends[i].account_id != cp->friends[i].account_id){
	行號 463: 	{	//Save friends
	行號 464: 		if( SQL_ERROR == Sql_Query(sql_handle, "DELETE FROM `%s` WHERE `char_id`='%d'", schema_config.friend_db, char_id) )
	行號 471: 		StringBuf_Printf(&buf, "INSERT INTO `%s` (`char_id`, `friend_id`) VALUES ", schema_config.friend_db);
	行號 471: 		StringBuf_Printf(&buf, "INSERT INTO `%s` (`char_id`, `friend_id`) VALUES ", schema_config.friend_db);
	行號 472: 		for( i = 0, count = 0; i < MAX_FRIENDS; ++i )
	行號 474: 			if( p->friends[i].char_id > 0 )
	行號 478: 				StringBuf_Printf(&buf, "('%d','%d')", char_id, p->friends[i].char_id);
	行號 490: 		strcat(save_status, " friends");
	行號 1029: 	struct s_friend tmp_friend;
	行號 1029: 	struct s_friend tmp_friend;
	行號 1209: 	//read friends
	行號 1210: 	//`friends` (`char_id`, `friend_id`)
	行號 1210: 	//`friends` (`char_id`, `friend_id`)
	行號 1211: 	if( SQL_ERROR == SqlStmt_Prepare(stmt, "SELECT c.`account_id`, c.`char_id`, c.`name` FROM `%s` c LEFT JOIN `%s` f ON f.`friend_id` = c.`char_id` WHERE f.`char_id`=? LIMIT %d", schema_config.char_db, schema_config.friend_db, MAX_FRIENDS)
	行號 1211: 	if( SQL_ERROR == SqlStmt_Prepare(stmt, "SELECT c.`account_id`, c.`char_id`, c.`name` FROM `%s` c LEFT JOIN `%s` f ON f.`friend_id` = c.`char_id` WHERE f.`char_id`=? LIMIT %d", schema_config.char_db, schema_config.friend_db, MAX_FRIENDS)
	行號 1211: 	if( SQL_ERROR == SqlStmt_Prepare(stmt, "SELECT c.`account_id`, c.`char_id`, c.`name` FROM `%s` c LEFT JOIN `%s` f ON f.`friend_id` = c.`char_id` WHERE f.`char_id`=? LIMIT %d", schema_config.char_db, schema_config.friend_db, MAX_FRIENDS)
	行號 1214: 	||	SQL_ERROR == SqlStmt_BindColumn(stmt, 0, SQLDT_INT,    &tmp_friend.account_id, 0, NULL, NULL)
	行號 1215: 	||	SQL_ERROR == SqlStmt_BindColumn(stmt, 1, SQLDT_INT,    &tmp_friend.char_id, 0, NULL, NULL)
	行號 1216: 	||	SQL_ERROR == SqlStmt_BindColumn(stmt, 2, SQLDT_STRING, &tmp_friend.name, sizeof(tmp_friend.name), NULL, NULL) )
	行號 1216: 	||	SQL_ERROR == SqlStmt_BindColumn(stmt, 2, SQLDT_STRING, &tmp_friend.name, sizeof(tmp_friend.name), NULL, NULL) )
	行號 1219: 	for( i = 0; i < MAX_FRIENDS && SQL_SUCCESS == SqlStmt_NextRow(stmt); ++i )
	行號 1220: 		memcpy(&p->friends[i], &tmp_friend, sizeof(tmp_friend));
	行號 1220: 		memcpy(&p->friends[i], &tmp_friend, sizeof(tmp_friend));
	行號 1220: 		memcpy(&p->friends[i], &tmp_friend, sizeof(tmp_friend));
	行號 1221: 	StringBuf_AppendStr(&msg_buf, " friends");
	行號 1674: 	/* delete char's friends list */
	行號 1675: 	if( SQL_ERROR == Sql_Query(sql_handle, "DELETE FROM `%s` WHERE `char_id` = '%d'", schema_config.friend_db, char_id) )
	行號 1678: 	/* delete char from other's friend list */
	行號 1680: 	if( SQL_ERROR == Sql_Query(sql_handle, "DELETE FROM `%s` WHERE `friend_id` = '%d'", schema_config.friend_db, char_id) )
	行號 1680: 	if( SQL_ERROR == Sql_Query(sql_handle, "DELETE FROM `%s` WHERE `friend_id` = '%d'", schema_config.friend_db, char_id) )
	行號 2319: 		schema_config.party_db, schema_config.pet_db, schema_config.friend_db, schema_config.mail_db, 
	行號 2452: 	//checking friend_db
	行號 2453: 	if( SQL_ERROR == Sql_Query(sql_handle, "SELECT  `char_id`,`friend_id` FROM `%s` LIMIT 1;", schema_config.friend_db) ){
	行號 2453: 	if( SQL_ERROR == Sql_Query(sql_handle, "SELECT  `char_id`,`friend_id` FROM `%s` LIMIT 1;", schema_config.friend_db) ){
	行號 2629: 		else if(!strcmpi(w1,"friend_db"))
	行號 2630: 			safestrncpy(schema_config.friend_db, w2, sizeof(schema_config.friend_db));
	行號 2630: 			safestrncpy(schema_config.friend_db, w2, sizeof(schema_config.friend_db));
	行號 2698: 	safestrncpy(schema_config.friend_db,"friends",sizeof(schema_config.friend_db));
	行號 2698: 	safestrncpy(schema_config.friend_db,"friends",sizeof(schema_config.friend_db));
	行號 2698: 	safestrncpy(schema_config.friend_db,"friends",sizeof(schema_config.friend_db));
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\char\char.hpp （1 個結果）
	行號 75: 	char friend_db[DB_NAME_LEN];
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\char\char_clif.cpp （1 個結果）
	行號 73: 			// Admin is friendly and uses triangle exchange
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\char\char_mapif.cpp （10 個結果）
	行號 660:  * Player requesting to remove friend from list
	行號 661:  * Remove RFIFOL(fd,6) (friend_id) from RFIFOL(fd,2) (char_id) friend list
	行號 661:  * Remove RFIFOL(fd,6) (friend_id) from RFIFOL(fd,2) (char_id) friend list
	行號 666: int chmapif_parse_askrmfriend(int fd){
	行號 670: 		uint32 char_id, friend_id;
	行號 672: 		friend_id = RFIFOL(fd,6);
	行號 673: 		if( SQL_ERROR == Sql_Query(sql_handle, "DELETE FROM `%s` WHERE `char_id`='%d' AND `friend_id`='%d' LIMIT 1",
	行號 674: 			schema_config.friend_db, char_id, friend_id) ) {
	行號 674: 			schema_config.friend_db, char_id, friend_id) ) {
	行號 1414: 			case 0x2b07: next=chmapif_parse_askrmfriend(fd); break;
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\char\char_mapif.hpp （1 個結果）
	行號 24: int chmapif_parse_askrmfriend(int fd);
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\common\db.cpp （1 個結果）
	行號 45:  *  - make the system thread friendly
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\common\mmo.hpp （7 個結果）
	行號 129: #define MAX_FRIENDS 40
	行號 446: 	short intimate;//pet friendly
	行號 506: struct s_friend {
	行號 563: 	struct s_friend friends[MAX_FRIENDS]; //New friend system [Skotlex]
	行號 563: 	struct s_friend friends[MAX_FRIENDS]; //New friend system [Skotlex]
	行號 563: 	struct s_friend friends[MAX_FRIENDS]; //New friend system [Skotlex]
	行號 563: 	struct s_friend friends[MAX_FRIENDS]; //New friend system [Skotlex]
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\achievement.cpp （1 個結果）
	行號 959: 		case AG_ADD_FRIEND:
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\achievement.hpp （1 個結果）
	行號 23: 	AG_ADD_FRIEND,
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\atcommand.cpp （20 個結果）
	行號 3084: ACMD_FUNC(petfriendly) {
	行號 3085: 	int friendly;
	行號 3089: 	if (!message || !*message || (friendly = atoi(message)) < 0) {
	行號 3090: 		clif_displaymessage(fd, msg_txt(sd,1016)); // Please enter a valid value (usage: @petfriendly <0-1000>).
	行號 3100: 	if (friendly < 0 || friendly > 1000)
	行號 3100: 	if (friendly < 0 || friendly > 1000)
	行號 3106: 	if (friendly == pd->pet.intimate) {
	行號 3111: 	pet_set_intimate(pd, friendly);
	行號 7959: ACMD_FUNC(homfriendly)
	行號 7961: 	int friendly = 0;
	行號 7971: 		clif_displaymessage(fd, msg_txt(sd,1258)); // Please enter a friendly value (usage: @homfriendly <friendly value [0-1000]>).
	行號 7971: 		clif_displaymessage(fd, msg_txt(sd,1258)); // Please enter a friendly value (usage: @homfriendly <friendly value [0-1000]>).
	行號 7971: 		clif_displaymessage(fd, msg_txt(sd,1258)); // Please enter a friendly value (usage: @homfriendly <friendly value [0-1000]>).
	行號 7975: 	friendly = atoi(message);
	行號 7976: 	friendly = cap_value(friendly, 0, 1000);
	行號 7976: 	friendly = cap_value(friendly, 0, 1000);
	行號 7978: 	sd->hd->homunculus.intimacy = friendly * 100 ;
	行號 7979: 	clif_send_homdata(sd,SP_INTIMATE,friendly);
	行號 10863: 		ACMD_DEF(petfriendly),
	行號 11030: 		ACMD_DEF(homfriendly),
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\battle.cpp （13 個結果）
	行號 9106:  * (enemy, friend, party, guild, etc)
	行號 9124: 	int strip_enemy = 1; //Flag which marks whether to remove the BCT_ENEMY status if it's also friend/ally.
	行號 9358: 					state |= BCT_PARTY; //Normal mobs with no ai or with AI_WAVEMODE are friends.
	行號 9597: 	{ "pet_friendly_rate",                  &battle_config.pet_friendly_rate,               100,    0,      INT_MAX,        },
	行號 9597: 	{ "pet_friendly_rate",                  &battle_config.pet_friendly_rate,               100,    0,      INT_MAX,        },
	行號 9599: 	{ "pet_hungry_friendly_decrease",       &battle_config.pet_hungry_friendly_decrease,    5,      0,      INT_MAX,        },
	行號 9599: 	{ "pet_hungry_friendly_decrease",       &battle_config.pet_hungry_friendly_decrease,    5,      0,      INT_MAX,        },
	行號 9603: 	{ "pet_support_min_friendly",           &battle_config.pet_support_min_friendly,        900,    0,      950,            },
	行號 9603: 	{ "pet_support_min_friendly",           &battle_config.pet_support_min_friendly,        900,    0,      950,            },
	行號 9845: 	{ "friend_auto_add",                    &battle_config.friend_auto_add,                 1,      0,      1,              },
	行號 9845: 	{ "friend_auto_add",                    &battle_config.friend_auto_add,                 1,      0,      1,              },
	行號 9848: 	{ "homunculus_friendly_rate",           &battle_config.homunculus_friendly_rate,        100,    0,      INT_MAX,        },
	行號 9848: 	{ "homunculus_friendly_rate",           &battle_config.homunculus_friendly_rate,        100,    0,      INT_MAX,        },
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\battle.hpp （8 個結果）
	行號 69: 	BCT_FRIEND		= BCT_NOENEMY,
	行號 224: 	int pet_friendly_rate;
	行號 226: 	int pet_hungry_friendly_decrease;
	行號 230: 	int pet_support_min_friendly;	//[Skotlex]
	行號 475: 	int friend_auto_add; //When accepting friends, both get friended. [Skotlex]
	行號 475: 	int friend_auto_add; //When accepting friends, both get friended. [Skotlex]
	行號 475: 	int friend_auto_add; //When accepting friends, both get friended. [Skotlex]
	行號 479: 	int homunculus_friendly_rate;
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\chrif.cpp （8 個結果）
	行號 68: //2b07: Outgoing, chrif_removefriend -> 'Tell charserver to remove friend_id from char_id friend list'
	行號 68: //2b07: Outgoing, chrif_removefriend -> 'Tell charserver to remove friend_id from char_id friend list'
	行號 68: //2b07: Outgoing, chrif_removefriend -> 'Tell charserver to remove friend_id from char_id friend list'
	行號 1949:  * Asks char server to remove friend_id from the friend list of char_id
	行號 1949:  * Asks char server to remove friend_id from the friend list of char_id
	行號 1951: int chrif_removefriend(uint32 char_id, int friend_id) {
	行號 1951: int chrif_removefriend(uint32 char_id, int friend_id) {
	行號 1958: 	WFIFOL(char_fd,6) = friend_id;
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\chrif.hpp （2 個結果）
	行號 82: int chrif_removefriend(uint32 char_id, int friend_id);
	行號 82: int chrif_removefriend(uint32 char_id, int friend_id);
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\clif.cpp （124 個結果）
	行號 11012: 		map_foreachpc(clif_friendslist_toggle_sub, sd->status.account_id, sd->status.char_id, 1);
	行號 15163: /// Friends List
	行號 15166: /// Toggles a single friend online/offline [Skotlex] (ZC_FRIENDS_STATE).
	行號 15166: /// Toggles a single friend online/offline [Skotlex] (ZC_FRIENDS_STATE).
	行號 15172: void clif_friendslist_toggle(struct map_session_data *sd,uint32 account_id, uint32 char_id, int online)
	行號 15176: 	//Seek friend.
	行號 15177: 	for (i = 0; i < MAX_FRIENDS && sd->status.friends[i].char_id &&
	行號 15177: 	for (i = 0; i < MAX_FRIENDS && sd->status.friends[i].char_id &&
	行號 15178: 		(sd->status.friends[i].char_id != char_id || sd->status.friends[i].account_id != account_id); i++);
	行號 15178: 		(sd->status.friends[i].char_id != char_id || sd->status.friends[i].account_id != account_id); i++);
	行號 15180: 	if(i == MAX_FRIENDS || sd->status.friends[i].char_id == 0)
	行號 15180: 	if(i == MAX_FRIENDS || sd->status.friends[i].char_id == 0)
	行號 15185: 	WFIFOL(fd, 2) = sd->status.friends[i].account_id;
	行號 15186: 	WFIFOL(fd, 6) = sd->status.friends[i].char_id;
	行號 15189: 	safestrncpy(WFIFOCP(fd, 11), sd->status.friends[i].name, NAME_LENGTH);
	行號 15195: //Subfunction called from clif_foreachclient to toggle friends on/off [Skotlex]
	行號 15196: int clif_friendslist_toggle_sub(struct map_session_data *sd,va_list ap)
	行號 15202: 	clif_friendslist_toggle(sd, account_id, char_id, online);
	行號 15207: /// Sends the whole friends list (ZC_FRIENDS_LIST).
	行號 15207: /// Sends the whole friends list (ZC_FRIENDS_LIST).
	行號 15210: void clif_friendslist_send(struct map_session_data *sd)
	行號 15219: 	// Send friends list
	行號 15220: 	WFIFOHEAD(fd, MAX_FRIENDS * size + 4);
	行號 15222: 	for(i = 0; i < MAX_FRIENDS && sd->status.friends[i].char_id; i++) {
	行號 15222: 	for(i = 0; i < MAX_FRIENDS && sd->status.friends[i].char_id; i++) {
	行號 15223: 		WFIFOL(fd, 4 + size * i + 0) = sd->status.friends[i].account_id;
	行號 15224: 		WFIFOL(fd, 4 + size * i + 4) = sd->status.friends[i].char_id;
	行號 15226: 		safestrncpy(WFIFOCP(fd, 4 + size * i + 8), sd->status.friends[i].name, NAME_LENGTH);
	行號 15236: 		if (map_charid2sd(sd->status.friends[n].char_id))
	行號 15237: 			clif_friendslist_toggle(sd, sd->status.friends[n].account_id, sd->status.friends[n].char_id, 1);
	行號 15237: 			clif_friendslist_toggle(sd, sd->status.friends[n].account_id, sd->status.friends[n].char_id, 1);
	行號 15237: 			clif_friendslist_toggle(sd, sd->status.friends[n].account_id, sd->status.friends[n].char_id, 1);
	行號 15242: /// Notification about the result of a friend add request (ZC_ADD_FRIENDS_LIST).
	行號 15242: /// Notification about the result of a friend add request (ZC_ADD_FRIENDS_LIST).
	行號 15245: ///     0 = MsgStringTable[821]="You have become friends with (%s)."
	行號 15246: ///     1 = MsgStringTable[822]="(%s) does not want to be friends with you."
	行號 15247: ///     2 = MsgStringTable[819]="Your Friend List is full."
	行號 15248: ///     3 = MsgStringTable[820]="(%s)'s Friend List is full."
	行號 15249: void clif_friendslist_reqack(struct map_session_data *sd, struct map_session_data *f_sd, int type)
	行號 15267: /// Asks a player for permission to be added as friend (ZC_REQ_ADD_FRIENDS).
	行號 15267: /// Asks a player for permission to be added as friend (ZC_REQ_ADD_FRIENDS).
	行號 15269: void clif_friendlist_req(struct map_session_data* sd, uint32 account_id, uint32 char_id, const char* name)
	行號 15282: /// Request to add a player as friend (CZ_ADD_FRIENDS).
	行號 15282: /// Request to add a player as friend (CZ_ADD_FRIENDS).
	行號 15284: void clif_parse_FriendsListAdd(int fd, struct map_session_data *sd)
	行號 15291: 	// Friend doesn't exist (no player with this name)
	行號 15297: 	if( sd->bl.id == f_sd->bl.id ) {// adding oneself as friend
	行號 15301: 	// ensure that the request player's friend list is not full
	行號 15302: 	ARR_FIND(0, MAX_FRIENDS, i, sd->status.friends[i].char_id == 0);
	行號 15302: 	ARR_FIND(0, MAX_FRIENDS, i, sd->status.friends[i].char_id == 0);
	行號 15304: 	if( i == MAX_FRIENDS ){
	行號 15305: 		clif_friendslist_reqack(sd, f_sd, 2);
	行號 15315: 	// Friend already exists
	行號 15316: 	for (i = 0; i < MAX_FRIENDS && sd->status.friends[i].char_id != 0; i++) {
	行號 15316: 	for (i = 0; i < MAX_FRIENDS && sd->status.friends[i].char_id != 0; i++) {
	行號 15317: 		if (sd->status.friends[i].char_id == f_sd->status.char_id) {
	行號 15318: 			clif_displaymessage(fd, msg_txt(sd,671)); //"Friend already exists."
	行號 15323: 	f_sd->friend_req = sd->status.char_id;
	行號 15324: 	sd->friend_req   = f_sd->status.char_id;
	行號 15326: 	clif_friendlist_req(f_sd, sd->status.account_id, sd->status.char_id, sd->status.name);
	行號 15330: /// Answer to a friend add request (CZ_ACK_REQ_ADD_FRIENDS).
	行號 15330: /// Answer to a friend add request (CZ_ACK_REQ_ADD_FRIENDS).
	行號 15336: void clif_parse_FriendsListReply(int fd, struct map_session_data *sd)
	行號 15351: 	if( sd->bl.id == account_id ) {// adding oneself as friend
	行號 15359: 	if (reply == 0 || !( sd->friend_req == f_sd->status.char_id && f_sd->friend_req == sd->status.char_id ) )
	行號 15359: 	if (reply == 0 || !( sd->friend_req == f_sd->status.char_id && f_sd->friend_req == sd->status.char_id ) )
	行號 15360: 		clif_friendslist_reqack(f_sd, sd, 1);
	行號 15364: 		for (i = 0; i < MAX_FRIENDS; i++)
	行號 15365: 			if (f_sd->status.friends[i].char_id == 0)
	行號 15367: 		if (i == MAX_FRIENDS) {
	行號 15368: 			clif_friendslist_reqack(f_sd, sd, 2);
	行號 15372: 		f_sd->status.friends[i].account_id = sd->status.account_id;
	行號 15373: 		f_sd->status.friends[i].char_id = sd->status.char_id;
	行號 15374: 		safestrncpy(f_sd->status.friends[i].name, sd->status.name, NAME_LENGTH);
	行號 15375: 		clif_friendslist_reqack(f_sd, sd, 0);
	行號 15377: 		achievement_update_objective(f_sd, AG_ADD_FRIEND, 1, i + 1);
	行號 15379: 		if (battle_config.friend_auto_add) {
	行號 15380: 			// Also add f_sd to sd's friendlist.
	行號 15381: 			for (i = 0; i < MAX_FRIENDS; i++) {
	行號 15382: 				if (sd->status.friends[i].char_id == f_sd->status.char_id)
	行號 15384: 				if (sd->status.friends[i].char_id == 0)
	行號 15387: 			if (i == MAX_FRIENDS) {
	行號 15388: 				clif_friendslist_reqack(sd, f_sd, 2);
	行號 15392: 			sd->status.friends[i].account_id = f_sd->status.account_id;
	行號 15393: 			sd->status.friends[i].char_id = f_sd->status.char_id;
	行號 15394: 			safestrncpy(sd->status.friends[i].name, f_sd->status.name, NAME_LENGTH);
	行號 15395: 			clif_friendslist_reqack(sd, f_sd, 0);
	行號 15397: 			achievement_update_objective(sd, AG_ADD_FRIEND, 1, i + 1);
	行號 15403: /// Request to delete a friend (CZ_DELETE_FRIENDS).
	行號 15403: /// Request to delete a friend (CZ_DELETE_FRIENDS).
	行號 15405: void clif_parse_FriendsListRemove(int fd, struct map_session_data *sd)
	行號 15415: 	// Search friend
	行號 15416: 	for (i = 0; i < MAX_FRIENDS &&
	行號 15417: 		(sd->status.friends[i].char_id != char_id || sd->status.friends[i].account_id != account_id); i++);
	行號 15417: 		(sd->status.friends[i].char_id != char_id || sd->status.friends[i].account_id != account_id); i++);
	行號 15419: 	if (i == MAX_FRIENDS) {
	行號 15424: 	//remove from friend's list first
	行號 15426: 		for (i = 0; i < MAX_FRIENDS &&
	行號 15427: 			(f_sd->status.friends[i].char_id != sd->status.char_id || f_sd->status.friends[i].account_id != sd->status.account_id); i++);
	行號 15427: 			(f_sd->status.friends[i].char_id != sd->status.char_id || f_sd->status.friends[i].account_id != sd->status.account_id); i++);
	行號 15429: 		if (i != MAX_FRIENDS) {
	行號 15431: 			for(j = i + 1; j < MAX_FRIENDS; j++)
	行號 15432: 				memcpy(&f_sd->status.friends[j-1], &f_sd->status.friends[j], sizeof(f_sd->status.friends[0]));
	行號 15432: 				memcpy(&f_sd->status.friends[j-1], &f_sd->status.friends[j], sizeof(f_sd->status.friends[0]));
	行號 15432: 				memcpy(&f_sd->status.friends[j-1], &f_sd->status.friends[j], sizeof(f_sd->status.friends[0]));
	行號 15434: 			memset(&f_sd->status.friends[MAX_FRIENDS-1], 0, sizeof(f_sd->status.friends[MAX_FRIENDS-1]));
	行號 15434: 			memset(&f_sd->status.friends[MAX_FRIENDS-1], 0, sizeof(f_sd->status.friends[MAX_FRIENDS-1]));
	行號 15434: 			memset(&f_sd->status.friends[MAX_FRIENDS-1], 0, sizeof(f_sd->status.friends[MAX_FRIENDS-1]));
	行號 15434: 			memset(&f_sd->status.friends[MAX_FRIENDS-1], 0, sizeof(f_sd->status.friends[MAX_FRIENDS-1]));
	行號 15443: 	} else { //friend not online -- ask char server to delete from his friendlist
	行號 15443: 	} else { //friend not online -- ask char server to delete from his friendlist
	行號 15444: 		if(chrif_removefriend(char_id,sd->status.char_id)) { // char-server offline, abort
	行號 15451: 	for (i = 0; i < MAX_FRIENDS &&
	行號 15452: 		(sd->status.friends[i].char_id != char_id || sd->status.friends[i].account_id != account_id); i++);
	行號 15452: 		(sd->status.friends[i].char_id != char_id || sd->status.friends[i].account_id != account_id); i++);
	行號 15454: 	for(j = i + 1; j < MAX_FRIENDS; j++)
	行號 15455: 		memcpy(&sd->status.friends[j-1], &sd->status.friends[j], sizeof(sd->status.friends[0]));
	行號 15455: 		memcpy(&sd->status.friends[j-1], &sd->status.friends[j], sizeof(sd->status.friends[0]));
	行號 15455: 		memcpy(&sd->status.friends[j-1], &sd->status.friends[j], sizeof(sd->status.friends[0]));
	行號 15457: 	memset(&sd->status.friends[MAX_FRIENDS-1], 0, sizeof(sd->status.friends[MAX_FRIENDS-1]));
	行號 15457: 	memset(&sd->status.friends[MAX_FRIENDS-1], 0, sizeof(sd->status.friends[MAX_FRIENDS-1]));
	行號 15457: 	memset(&sd->status.friends[MAX_FRIENDS-1], 0, sizeof(sd->status.friends[MAX_FRIENDS-1]));
	行號 15457: 	memset(&sd->status.friends[MAX_FRIENDS-1], 0, sizeof(sd->status.friends[MAX_FRIENDS-1]));
	行號 15458: 	clif_displaymessage(fd, msg_txt(sd,674)); //"Friend removed"
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\clif.hpp （4 個結果）
	行號 901: //friends list
	行號 902: int clif_friendslist_toggle_sub(struct map_session_data *sd,va_list ap);
	行號 903: void clif_friendslist_send(struct map_session_data *sd);
	行號 904: void clif_friendslist_reqack(struct map_session_data *sd, struct map_session_data *f_sd, int type);
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\clif_packetdb.hpp （10 個結果）
	行號 422: 	parseable_packet(0x0202,26,clif_parse_FriendsListAdd,2);
	行號 423: 	parseable_packet(0x0203,10,clif_parse_FriendsListRemove,2,6);
	行號 428: 	parseable_packet(0x0208,11,clif_parse_FriendsListReply,2,6,10);
	行號 445: 	parseable_packet(0x0208,14,clif_parse_FriendsListReply,2,6,10);
	行號 1831: 	parseable_packet(0x0436,26,clif_parse_FriendsListAdd,2);
	行號 1865: 	parseable_packet(0x0369,26,clif_parse_FriendsListAdd,2);
	行號 1890: 	parseable_packet(0x089c,26,clif_parse_FriendsListAdd,2);
	行號 1973: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 2039: 	parseable_packet(0x086f,26,clif_parse_FriendsListAdd,2);
	行號 2372: 	packet(0x0206,35); // ZC_FRIENDS_STATE
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\clif_shuffle.hpp （153 個結果）
	行號 35: 	parseable_packet(0x0962,26,clif_parse_FriendsListAdd,2);
	行號 41: 	parseable_packet(0x0362,26,clif_parse_FriendsListAdd,2);
	行號 79: 	parseable_packet(0x0877,26,clif_parse_FriendsListAdd,2);
	行號 104: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 159: 	parseable_packet(0x0940,26,clif_parse_FriendsListAdd,2);
	行號 189: 	parseable_packet(0x0953,26,clif_parse_FriendsListAdd,2);
	行號 217: 	parseable_packet(0x08AB,26,clif_parse_FriendsListAdd,2);
	行號 230: 	parseable_packet(0x0360,26,clif_parse_FriendsListAdd,2);
	行號 259: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 292: 	parseable_packet(0x0863,26,clif_parse_FriendsListAdd,2);
	行號 321: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 352: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 407: 	parseable_packet(0x094B,26,clif_parse_FriendsListAdd,2);
	行號 434: 	parseable_packet(0x091a,26,clif_parse_FriendsListAdd,2);
	行號 466: 	parseable_packet(0x087c,26,clif_parse_FriendsListAdd,2);
	行號 497: 	parseable_packet(0x0868,26,clif_parse_FriendsListAdd,2);
	行號 532: 	parseable_packet(0x0963,26,clif_parse_FriendsListAdd,2);
	行號 538: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 590: 	parseable_packet(0x0946,26,clif_parse_FriendsListAdd,2);
	行號 614: 	parseable_packet(0x08a6,26,clif_parse_FriendsListAdd,2);
	行號 652: 	parseable_packet(0x0940,26,clif_parse_FriendsListAdd,2);
	行號 686: 	parseable_packet(0x0953,26,clif_parse_FriendsListAdd,2);
	行號 693: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 748: 	parseable_packet(0x093d,26,clif_parse_FriendsListAdd,2);
	行號 780: 	parseable_packet(0x0958,26,clif_parse_FriendsListAdd,2);
	行號 805: 	parseable_packet(0x08A8,26,clif_parse_FriendsListAdd,2);
	行號 817: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 873: 	parseable_packet(0x094e,26,clif_parse_FriendsListAdd,2);
	行號 896: 	parseable_packet(0x0865,26,clif_parse_FriendsListAdd,2);
	行號 919: 	parseable_packet(0x088d,26,clif_parse_FriendsListAdd,2);
	行號 950: 	parseable_packet(0x089E,26,clif_parse_FriendsListAdd,2);
	行號 972: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 1017: 	parseable_packet(0x0811,26,clif_parse_FriendsListAdd,2);
	行號 1033: 	parseable_packet(0x0817,26,clif_parse_FriendsListAdd,2);
	行號 1088: 	parseable_packet(0x086A,26,clif_parse_FriendsListAdd,2);
	行號 1096: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 1127: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 1166: 	parseable_packet(0x07EC,26,clif_parse_FriendsListAdd,2);
	行號 1206: 	parseable_packet(0x0871,26,clif_parse_FriendsListAdd,2);
	行號 1237: 	parseable_packet(0x0921,26,clif_parse_FriendsListAdd,2);
	行號 1264: 	parseable_packet(0x0899,26,clif_parse_FriendsListAdd,2);
	行號 1282: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 1339: 	parseable_packet(0x0964,26,clif_parse_FriendsListAdd,2);
	行號 1363: 	parseable_packet(0x091D,26,clif_parse_FriendsListAdd,2);
	行號 1394: 	parseable_packet(0x091b,26,clif_parse_FriendsListAdd,2);
	行號 1429: 	parseable_packet(0x08a0,26,clif_parse_FriendsListAdd,2);
	行號 1449: 	parseable_packet(0x0899,26,clif_parse_FriendsListAdd,2);
	行號 1468: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 1524: 	parseable_packet(0x0961,26,clif_parse_FriendsListAdd,2);
	行號 1530: 	parseable_packet(0x0361,26,clif_parse_FriendsListAdd,2);
	行號 1585: 	parseable_packet(0x0870,26,clif_parse_FriendsListAdd,2);
	行號 1595: 	parseable_packet(0x0870,26,clif_parse_FriendsListAdd,2);
	行號 1641: 	parseable_packet(0x08a9,26,clif_parse_FriendsListAdd,2);
	行號 1656: 	parseable_packet(0x085b,26,clif_parse_FriendsListAdd,2);
	行號 1685: 	parseable_packet(0x0361,26,clif_parse_FriendsListAdd,2);
	行號 1716: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 1747: 	parseable_packet(0x0365,26,clif_parse_FriendsListAdd,2);
	行號 1803: 	parseable_packet(0x093b,26,clif_parse_FriendsListAdd,2);
	行號 1814: 	parseable_packet(0x0878,26,clif_parse_FriendsListAdd,2);
	行號 1864: 	parseable_packet(0x0945,26,clif_parse_FriendsListAdd,2);
	行號 1894: 	parseable_packet(0x0935,26,clif_parse_FriendsListAdd,2);
	行號 1902: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 1957: 	parseable_packet(0x0952,26,clif_parse_FriendsListAdd,2);
	行號 1985: 	parseable_packet(0x0894,26,clif_parse_FriendsListAdd,2);
	行號 2019: 	parseable_packet(0x08a9,26,clif_parse_FriendsListAdd,2);
	行號 2050: 	parseable_packet(0x0951,26,clif_parse_FriendsListAdd,2);
	行號 2066: 	parseable_packet(0x0817,26,clif_parse_FriendsListAdd,2);
	行號 2113: 	parseable_packet(0x0969,26,clif_parse_FriendsListAdd,2);
	行號 2117: 	parseable_packet(0x0281,26,clif_parse_FriendsListAdd,2);
	行號 2159: 	parseable_packet(0x0890,26,clif_parse_FriendsListAdd,2);
	行號 2202: 	parseable_packet(0x094a,26,clif_parse_FriendsListAdd,2);
	行號 2216: 	parseable_packet(0x0884,26,clif_parse_FriendsListAdd,2);
	行號 2264: 	parseable_packet(0x0939,26,clif_parse_FriendsListAdd,2);
	行號 2292: 	parseable_packet(0x092a,26,clif_parse_FriendsListAdd,2);
	行號 2306: 	parseable_packet(0x0363,26,clif_parse_FriendsListAdd,2);
	行號 2344: 	parseable_packet(0x0895,26,clif_parse_FriendsListAdd,2);
	行號 2377: 	parseable_packet(0x0888,26,clif_parse_FriendsListAdd,2);
	行號 2411: 	parseable_packet(0x092c,26,clif_parse_FriendsListAdd,2);
	行號 2429: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 2476: 	parseable_packet(0x0928,26,clif_parse_FriendsListAdd,2);
	行號 2491: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 2544: 	parseable_packet(0x094e,26,clif_parse_FriendsListAdd,2);
	行號 2568: 	parseable_packet(0x0931,26,clif_parse_FriendsListAdd,2);
	行號 2588: 	parseable_packet(0x0819,26,clif_parse_FriendsListAdd,2);
	行號 2640: 	parseable_packet(0x0963,26,clif_parse_FriendsListAdd,2);
	行號 2660: 	parseable_packet(0x0898,26,clif_parse_FriendsListAdd,2);
	行號 2695: 	parseable_packet(0x0928,26,clif_parse_FriendsListAdd,2);
	行號 2730: 	parseable_packet(0x0937,26,clif_parse_FriendsListAdd,2);
	行號 2739: 	parseable_packet(0x0835,26,clif_parse_FriendsListAdd,2);
	行號 2790: 	parseable_packet(0x0941,26,clif_parse_FriendsListAdd,2);
	行號 2826: 	parseable_packet(0x0959,26,clif_parse_FriendsListAdd,2);
	行號 2845: 	parseable_packet(0x0867,26,clif_parse_FriendsListAdd,2);
	行號 2881: 	parseable_packet(0x0862,26,clif_parse_FriendsListAdd,2);
	行號 2911: 	parseable_packet(0x0928,26,clif_parse_FriendsListAdd,2);
	行號 2944: 	parseable_packet(0x091c,26,clif_parse_FriendsListAdd,2);
	行號 2977: 	parseable_packet(0x085a,26,clif_parse_FriendsListAdd,2);
	行號 3001: 	parseable_packet(0x0877,26,clif_parse_FriendsListAdd,2);
	行號 3043: 	parseable_packet(0x0962,26,clif_parse_FriendsListAdd,2);
	行號 3066: 	parseable_packet(0x0920,26,clif_parse_FriendsListAdd,2);
	行號 3099: 	parseable_packet(0x0919,26,clif_parse_FriendsListAdd,2);
	行號 3129: 	parseable_packet(0x0892,26,clif_parse_FriendsListAdd,2);
	行號 3146: 	parseable_packet(0x0876,26,clif_parse_FriendsListAdd,2);
	行號 3185: 	parseable_packet(0x085f,26,clif_parse_FriendsListAdd,2);
	行號 3217: 	parseable_packet(0x08a0,26,clif_parse_FriendsListAdd,2);
	行號 3235: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 3274: 	parseable_packet(0x0872,26,clif_parse_FriendsListAdd,2);
	行號 3297: 	parseable_packet(0x023b,26,clif_parse_FriendsListAdd,2);
	行號 3351: 	parseable_packet(0x0939,26,clif_parse_FriendsListAdd,2);
	行號 3379: 	parseable_packet(0x086f,26,clif_parse_FriendsListAdd,2);
	行號 3408: 	parseable_packet(0x0942,26,clif_parse_FriendsListAdd,2);
	行號 3441: 	parseable_packet(0x093a,26,clif_parse_FriendsListAdd,2);
	行號 3476: 	parseable_packet(0x0958,26,clif_parse_FriendsListAdd,2);
	行號 3507: 	parseable_packet(0x093c,26,clif_parse_FriendsListAdd,2);
	行號 3539: 	parseable_packet(0x0960,26,clif_parse_FriendsListAdd,2);
	行號 3570: 	parseable_packet(0x0967,26,clif_parse_FriendsListAdd,2);
	行號 3581: 	parseable_packet(0x0861,26,clif_parse_FriendsListAdd,2);
	行號 3616: 	parseable_packet(0x0885,26,clif_parse_FriendsListAdd,2);
	行號 3646: 	parseable_packet(0x0867,26,clif_parse_FriendsListAdd,2);
	行號 3677: 	parseable_packet(0x07E4,26,clif_parse_FriendsListAdd,2);
	行號 3700: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 3746: 	parseable_packet(0x0886,26,clif_parse_FriendsListAdd,2);
	行號 3762: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 3818: 	parseable_packet(0x0946,26,clif_parse_FriendsListAdd,2);
	行號 3839: 	parseable_packet(0x091D,26,clif_parse_FriendsListAdd,2);
	行號 3879: 	parseable_packet(0x094F,26,clif_parse_FriendsListAdd,2);
	行號 3900: 	parseable_packet(0x08A3,26,clif_parse_FriendsListAdd,2);
	行號 3943: 	parseable_packet(0x08AC,26,clif_parse_FriendsListAdd,2);
	行號 3969: 	parseable_packet(0x0939,26,clif_parse_FriendsListAdd,2);
	行號 4002: 	parseable_packet(0x08A3,26,clif_parse_FriendsListAdd,2);
	行號 4012: 	parseable_packet(0x035F,26,clif_parse_FriendsListAdd,2);
	行號 4046: 	parseable_packet(0x0861,26,clif_parse_FriendsListAdd,2);
	行號 4098: 	parseable_packet(0x094B,26,clif_parse_FriendsListAdd,2);
	行號 4122: 	parseable_packet(0x0899,26,clif_parse_FriendsListAdd,2);
	行號 4159: 	parseable_packet(0x087B,26,clif_parse_FriendsListAdd,2);
	行號 4192: 	parseable_packet(0x094A,26,clif_parse_FriendsListAdd,2);
	行號 4199: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 4236: 	parseable_packet(0x0872,26,clif_parse_FriendsListAdd,2);
	行號 4267: 	parseable_packet(0x0878,26,clif_parse_FriendsListAdd,2);
	行號 4299: 	parseable_packet(0x0802,26,clif_parse_FriendsListAdd,2);
	行號 4346: 	parseable_packet(0x0946,26,clif_parse_FriendsListAdd,2);
	行號 4355: 	parseable_packet(0x0363,26,clif_parse_FriendsListAdd,2);
	行號 4404: 	parseable_packet(0x091D,26,clif_parse_FriendsListAdd,2);
	行號 4429: 	parseable_packet(0x0802,26,clif_parse_FriendsListAdd,2);
	行號 4471: 	parseable_packet(0x0957,26,clif_parse_FriendsListAdd,2);
	行號 4502: 	parseable_packet(0x0946,26,clif_parse_FriendsListAdd,2);
	行號 4517: 	parseable_packet(0x0899,26,clif_parse_FriendsListAdd,2);
	行號 4540: 	parseable_packet(0x023B,26,clif_parse_FriendsListAdd,2);
	行號 4591: 	parseable_packet(0x0919,26,clif_parse_FriendsListAdd,2);
	行號 4623: 	parseable_packet(0x0881,26,clif_parse_FriendsListAdd,2);
	行號 4649: 	parseable_packet(0x0917,26,clif_parse_FriendsListAdd,2);
	行號 4664: 	parseable_packet(0x0436,26,clif_parse_FriendsListAdd,2);
	行號 4707: 	parseable_packet(0x08AA,26,clif_parse_FriendsListAdd,2);
	行號 4724: 	parseable_packet(0x0202,26,clif_parse_FriendsListAdd,2);
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\homunculus.cpp （2 個結果）
	行號 794: 	if (battle_config.homunculus_friendly_rate != 100)
	行號 795: 		value = (value * battle_config.homunculus_friendly_rate) / 100;
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\mob.cpp （38 個結果）
	行號 3586:  * Friendly Mob whose HP is decreasing by a nearby MOB is looked for.
	行號 3588: int mob_getfriendhprate_sub(struct block_list *bl,va_list ap)
	行號 3602: 	if ((*fr) != NULL) //A friend was already found.
	行號 3614: static struct block_list *mob_getfriendhprate(struct mob_data *md,int min_rate,int max_rate)
	行號 3624: 	map_foreachinallrange(mob_getfriendhprate_sub, &md->bl, 8, type,md,min_rate,max_rate,&fr);
	行號 3644: int mob_getfriendstatus_sub(struct block_list *bl,va_list ap)
	行號 3670: 	if( flag^( cond1==MSC_FRIENDSTATUSOFF ) )
	行號 3676: struct mob_data *mob_getfriendstatus(struct mob_data *md,int cond1,int cond2)
	行號 3681: 	map_foreachinallrange(mob_getfriendstatus_sub, &md->bl, 8,BL_MOB, md,cond1,cond2,&fr);
	行號 3708: 	struct block_list *fbl = NULL; //Friend bl, which can either be a BL_PC or BL_MOB depending on the situation. [Skotlex]
	行號 3778: 				case MSC_FRIENDHPLTMAXRATE:	// friend HP < maxhp%
	行號 3778: 				case MSC_FRIENDHPLTMAXRATE:	// friend HP < maxhp%
	行號 3779: 					flag = ((fbl = mob_getfriendhprate(md, 0, ms[i]->cond2)) != NULL); break;
	行號 3780: 				case MSC_FRIENDHPINRATE	:
	行號 3781: 					flag = ((fbl = mob_getfriendhprate(md, ms[i]->cond2, ms[i]->val[0])) != NULL); break;
	行號 3782: 				case MSC_FRIENDSTATUSON:	// friend status[num] on
	行號 3782: 				case MSC_FRIENDSTATUSON:	// friend status[num] on
	行號 3783: 				case MSC_FRIENDSTATUSOFF:	// friend status[num] off
	行號 3783: 				case MSC_FRIENDSTATUSOFF:	// friend status[num] off
	行號 3784: 					flag = ((fmd = mob_getfriendstatus(md, ms[i]->cond1, ms[i]->cond2)) != NULL); break;
	行號 3835: 				case MST_FRIEND:
	行號 3877: 				case MST_FRIEND:
	行號 4014: 	else if (flag&1) //Friendly Character, remove looting.
	行號 4084: 				ms->target = MST_FRIEND;
	行號 4085: 				ms->cond1 = MSC_FRIENDHPLTMAXRATE;
	行號 4108: 			ms->target = MST_FRIEND;
	行號 4109: 			ms->cond1 = MSC_FRIENDHPLTMAXRATE;
	行號 4162: 		if (flag&1) //Friendly Character
	行號 5727: 		{ "friendhpltmaxrate", MSC_FRIENDHPLTMAXRATE },
	行號 5727: 		{ "friendhpltmaxrate", MSC_FRIENDHPLTMAXRATE },
	行號 5728: 		{ "friendhpinrate",    MSC_FRIENDHPINRATE    },
	行號 5728: 		{ "friendhpinrate",    MSC_FRIENDHPINRATE    },
	行號 5731: 		{ "friendstatuson",    MSC_FRIENDSTATUSON    },
	行號 5731: 		{ "friendstatuson",    MSC_FRIENDSTATUSON    },
	行號 5732: 		{ "friendstatusoff",   MSC_FRIENDSTATUSOFF   },
	行號 5732: 		{ "friendstatusoff",   MSC_FRIENDSTATUSOFF   },
	行號 5765: 		{	"friend",	MST_FRIEND	},
	行號 5765: 		{	"friend",	MST_FRIEND	},
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\mob.hpp （6 個結果）
	行號 34: //Min time before mobs do a check to call nearby friends for help (or for slaves to support their master)
	行號 395: 	MST_FRIEND,
	行號 412: 	MSC_FRIENDHPLTMAXRATE,
	行號 413: 	MSC_FRIENDHPINRATE,
	行號 416: 	MSC_FRIENDSTATUSON,
	行號 417: 	MSC_FRIENDSTATUSOFF,
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\party.cpp （4 個結果）
	行號 999: 						0,0,skill_get_time(SG_FRIEND, 1));
	行號 1005: 					&& pc_checkskill(p_sd,SG_FRIEND)) {
	行號 1007: 						50+50*pc_checkskill(p_sd,SG_FRIEND), //+100/150/200% rate
	行號 1008: 						0,0,skill_get_time(SG_FRIEND, 1));
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\pc.cpp （2 個結果）
	行號 1825: 	// Send friends list
	行號 1826: 	clif_friendslist_send(sd);
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\pc.hpp （2 個結果）
	行號 750: 	 * Guarantees your friend request is legit (for bugreport:4629)
	行號 752: 	int friend_req;
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\pet.cpp （3 個結果）
	行號 750: 		pd->pet.intimate < battle_config.pet_support_min_friendly ||
	行號 1592: 		if( battle_config.pet_friendly_rate != 100 )
	行號 1593: 			k = (pet_db_ptr->r_hungry * battle_config.pet_friendly_rate) / 100;
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\pet.hpp （2 個結果）
	行號 45: 	uint16 attack_rate; ///< Rate of which the pet will attack (requires at least pet_support_min_friendly intimacy).
	行號 46: 	uint16 defence_attack_rate; ///< Rate of which the pet will retaliate when master is being attacked (requires at least pet_support_min_friendly intimacy).
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\script.cpp （2 個結果）
	行號 15264:  * 3:friendly 4:hungry, 5: rename flag.6:level,
	行號 15302:  * 3:friendly 4:hungry, 5: rename flag.
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\script_constants.hpp （4 個結果）
	行號 2936: 	export_constant(EFST_FRIEND);
	行號 2937: 	export_constant(EFST_FRIENDUP);
	行號 5584: 	export_constant(AG_ADD_FRIEND);
	行號 8773: 	export_constant(BCT_FRIEND);
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\skill.cpp （6 個結果）
	行號 1262: 		else if (sc->data[SC_READYCOUNTER]) { //additional chance from SG_FRIEND [Komurka]
	行號 1390: 						rate += rate * (20 * pc_checkskill(sd, WH_NATUREFRIENDLY)) / 100;
	行號 3278: 			if (sd->status.party_id > 0) //bonus from SG_FRIEND [Komurka]
	行號 3725: 		case TK_COUNTER: {	//bonus from SG_FRIEND [Komurka]
	行號 3727: 			if( sd && sd->status.party_id > 0 && (level = pc_checkskill(sd,SG_FRIEND)) )
	行號 12873: 	// Jump Kick can still fail even though you can jump to friendly targets.
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\skill.hpp （4 個結果）
	行號 156: 	UF_NOENEMY,	// If 'defunit_not_enemy' is set, the target is changed to 'friend'
	行號 258: 	uint16 inf;									///< Inf: 0- passive, 1- enemy, 2- place, 4- self, 16- friend, 32- trap
	行號 1157: 	SG_FRIEND,
	行號 2130: 	WH_NATUREFRIENDLY,
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\status.cpp （3 個結果）
	行號 1319: 	add_sc( SG_FRIEND		, SC_SKILLRATE_UP	);
	行號 4545: 	pd->rate_fix = min(1000 * (pd->pet.intimate - battle_config.pet_support_min_friendly) / (1000 - battle_config.pet_support_min_friendly) + 500, USHRT_MAX);
	行號 4545: 	pd->rate_fix = min(1000 * (pd->pet.intimate - battle_config.pet_support_min_friendly) / (1000 - battle_config.pet_support_min_friendly) + 500, USHRT_MAX);
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\status.hpp （2 個結果）
	行號 1441: 	EFST_FRIEND,
	行號 1442: 	EFST_FRIENDUP,
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\map\unit.cpp （2 個結果）
	行號 3422: 			// Notify friends that this char logged out. [Skotlex]
	行號 3423: 			map_foreachpc(clif_friendslist_toggle_sub, sd->status.account_id, sd->status.char_id, 0);
  C:\Users\nyo\Desktop\4CrAM-Tier3\src\tool\csv2yaml.cpp （4 個結果）
	行號 642: 		// pet_hungry_friendly_decrease battle_conf
	行號 2196: 			if (it_unit->second.target_str.compare("noenemy") == 0 || it_unit->second.target_str.compare("friend") == 0)
	行號 2197: 				body << YAML::Key << "Target" << YAML::Value << "Friend";
	行號 2198: 			//else if (it_unit->second.target_str.compare("noenemy") == 0) // Same as Friend

					status_change_end(bl, SC_DEATHBOUND, INVALID_TIMER);
					rdamage += rd1 * 70 / 100; // Target receives 70% of the amplified damage. [Rytech]
				}
			}
		}
	} else {
		if (!status_reflect && sd && sd->bonus.long_weapon_damage_return) {
			rdamage += damage * sd->bonus.long_weapon_damage_return / 100;
			rdamage = i64max(rdamage, 1);
		}
	}

	if (rdamage > 0) {
		map_session_data* ssd = BL_CAST(BL_PC, src);
		if (ssd && ssd->bonus.reduce_damage_return != 0) {
			rdamage -= rdamage * ssd->bonus.reduce_damage_return / 100;
			rdamage = i64max(rdamage, 1);
		}
	}

	if (ssc) {
		if (ssc->data[SC_REFLECTDAMAGE]) {
			rdamage -= damage * ssc->data[SC_REFLECTDAMAGE]->val2 / 100;
			if (--(ssc->data[SC_REFLECTDAMAGE]->val3) < 1) // TODO: Confirm if reflect count still exists
				status_change_end(bl, SC_REFLECTDAMAGE, INVALID_TIMER);
		}
		if (ssc->data[SC_VENOMBLEED] && ssc->data[SC_VENOMBLEED]->val3 == 0)
			rdamage -= damage * ssc->data[SC_VENOMBLEED]->val2 / 100;

		if (rdamage > 0 && ssc->data[SC_REF_T_POTION])
			return 1; // Returns 1 damage
	}



































else if( attack_type == BF_WEAPON && tsc->data[SC_REFLECTDAMAGE] ) // Don't reflect your own damage (Grand Cross)
				map_foreachinshootrange(battle_damage_area,target,skill_get_splash(LG_REFLECTDAMAGE,1),BL_CHAR,tick,target,wd->amotion,sstatus->dmotion,rdamage,wd->flag);
			else if( attack_type == BF_WEAPON || attack_type == BF_MISC) {
				rdelay = clif_damage(src, (!d_bl) ? src : d_bl, tick, wd->amotion, sstatus->dmotion, rdamage, 1, DMG_ENDURE, 0, false);
				if( tsd )
					battle_drain(tsd, src, rdamage, rdamage, sstatus->race, sstatus->class_);
				// It appears that official servers give skill reflect damage a longer delay
				battle_delay_damage(tick, wd->amotion, target, (!d_bl) ? src : d_bl, 0, CR_REFLECTSHIELD, 0, rdamage, ATK_DEF, rdelay ,true, false);
				skill_additional_effect(target, (!d_bl) ? src : d_bl, CR_REFLECTSHIELD, 1, BF_WEAPON|BF_SHORT|BF_NORMAL, ATK_DEF, tick);
			}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/**
	* Extended Vending system [Lilith]
	**/
	{ "extended_vending",					&battle_config.extended_vending,				1,		0,		1,				},
	{ "show_broadcas_info",					&battle_config.show_broadcas_info,				1,		0,		1,				},
	{ "show_item_vending",					&battle_config.show_item_vending,				1,		0,		1,				},
	{ "ex_vending_info",					&battle_config.ex_vending_info,					1,		0,		1,				},
	{ "ex_vending_report",					&battle_config.ex_vending_report,				1,		0,		1,				}, // [Easycore]
	{ "item_zeny",							&battle_config.item_zeny,						0,		0,		MAX_ITEMID,		},
	{ "item_cash",							&battle_config.item_cash,						0,		0,		MAX_ITEMID,		},

	/**
	* Extended Vending system [Lilith]
	**/
	int extended_vending;
	int show_broadcas_info;
	int show_item_vending;
	int ex_vending_info;
	int ex_vending_report;
	int item_zeny;
	int item_cash;
	
	unsigned short vend_loot;		// Extended Vending system [Lilith]
	
	// Vending shouldn't open if vend_loot is 0 and extended vending is enabled [Easycore]
	ShowWarning("vend loot = %d\n", sd->vend_loot);
	if (battle_config.extended_vending && sd->vend_loot == 0) {
		sd->state.prevend = 0;
		return;
	}
	
		z += ((double)vsd->vending[j].value * (double)amount);	
		/**
		* Extended Vending system [Lilith]
		**/
		if (battle_config.extended_vending) {
			if (vsd->vend_loot == battle_config.item_zeny || !vsd->vend_loot) {
				if (z > (double)sd->status.zeny || z < 0. || z >(double)MAX_ZENY)
				{
					//clif_buyvending(sd, idx, amount, 1); // you don't have enough zeny
					return;
				}
				if (z + (double)vsd->status.zeny > (double)MAX_ZENY && !battle_config.vending_over_max)
				{
					clif_buyvending(sd, idx, vsd->vending[j].amount, 4); // too much zeny = overflow
					return;
				}
			}
			else if (vsd->vend_loot == battle_config.item_cash) {
				if (z > sd->cashPoints || z < 0. || z >(double)MAX_ZENY) {
					clif_messagecolor(&sd->bl, color_table[COLOR_CYAN], msg_txt(sd, 1590), false, SELF);
					return;
				}
			}
			else {
				int k, loot_count = 0, vsd_w = 0;
				for (k = 0; k < MAX_INVENTORY; k++) {
					if (sd->inventory.u.items_inventory[k].bound) {
						clif_displaymessage(sd->fd, "Cannot buy with Bound Items.");
						return;
					}
					if (sd->inventory.u.items_inventory[k].nameid == vsd->vend_loot)
						loot_count += sd->inventory.u.items_inventory[k].amount;
				}
 
				if (z > loot_count || z < 0)
				{
					clif_messagecolor(&sd->bl, color_table[COLOR_CYAN], msg_txt(sd, 1591), false, SELF);
					return;
				}
				if (pc_inventoryblank(vsd) <= 0)
				{
					clif_messagecolor(&sd->bl, color_table[COLOR_CYAN], msg_txt(sd, 1592), false, SELF);
					return;
				}
				vsd_w += itemdb_weight(vsd->vend_loot) * (int)z;
				if (vsd_w + vsd->weight > vsd->max_weight)
				{
					clif_messagecolor(&sd->bl, color_table[COLOR_CYAN], msg_txt(sd, 1593), false, SELF);
					return;
				}
			}

	/**
	* Extended Vending system [Lilith]
	**/
	if (battle_config.extended_vending) {
		if (vsd->vend_loot == battle_config.item_zeny || !vsd->vend_loot) {
			pc_payzeny(sd, (int)z, LOG_TYPE_VENDING, vsd);
			achievement_update_objective(sd, AG_SPEND_ZENY, 1, (int)z);
			z = vending_calc_tax(sd, z);
			pc_getzeny(vsd, (int)z, LOG_TYPE_VENDING, sd);
		}
		else if (vsd->vend_loot == battle_config.item_cash) {
			pc_paycash(sd, (int)z, 0, LOG_TYPE_VENDING);
			pc_getcash(vsd, (int)z, 0, LOG_TYPE_VENDING);
		}
		else {
			for (i = 0; i < MAX_INVENTORY; i++)
				if (sd->inventory.u.items_inventory[i].nameid == vsd->vend_loot)
				{
					struct item *item;
					item = &sd->inventory.u.items_inventory[i];
					pc_additem(vsd, item, (int)z, LOG_TYPE_VENDING);
				}
			pc_delitem(sd, pc_search_inventory(sd, vsd->vend_loot), (int)z, 0, 6, LOG_TYPE_VENDING);
		}
	}
	else {
		pc_payzeny(sd, (int)z, LOG_TYPE_VENDING, vsd);
		achievement_update_objective(sd, AG_SPEND_ZENY, 1, (int)z);
		z = vending_calc_tax(sd, z);
		pc_getzeny(vsd, (int)z, LOG_TYPE_VENDING, sd);
	}
	int mailprofit = 0;

			if (battle_config.ex_vending_info) {// Extended Vending system [Lilith]
				double rev = ((double)vsd->vending[vend_list[i]].value * (double)amount);
				if (vsd->vend_loot == ITEMID_ZENY)
					sprintf(temp, msg_txt(sd, 1597), sd->status.name, item_name, amount, (int)(rev -= rev * (battle_config.vending_tax / 10000.)),"Zeny");
				else
					sprintf(temp, msg_txt(sd, 1597), sd->status.name, item_name, amount, (int)rev, itemdb_ename(vsd->vend_loot)); //No Tax for Items/Cash [Easycore]
			} else
				sprintf(temp, msg_txt(sd, 265), sd->status.name);
			clif_displaymessage(vsd->fd, temp);
		}
		if (battle_config.ex_vending_info) { // Extended Vending system [Lilith]
			char temp[256];
			double frev = ((double)vsd->vending[vend_list[i]].value * (double)amount);
			sprintf(temp, msg_txt(sd,1598), sd->status.name, (int)frev, vsd->vend_loot?itemdb_ename(vsd->vend_loot):"Zeny");
			clif_displaymessage(vsd->fd, temp);
		}
		if (battle_config.ex_vending_report && pc_readglobalreg(vsd, add_str("NOVREPORT")) == 0 ) { // Vending Report MailBox [Easycore]
			const char *sender, *title, *body;
			struct mail_message msg;
			char message[1000];
			mailprofit += vsd->vending[vend_list[i]].value *amount;
			memset(&msg, 0, sizeof(struct mail_message));
			msg.dest_id = vsd->status.char_id;
			sender = "Server";
			safestrncpy(msg.send_name, sender, NAME_LENGTH);
			title = "Vending Report";
			safestrncpy(msg.title, title, MAIL_TITLE_LENGTH);
			if (i == 0)
				sprintf(message, "[%s] has bought in your store: \r\n", sd->status.name);
			#if PACKETVER >= 20150513 // Old mail box is too shorter [Easycore]
			if (i >= 0 && strlen(message)<180)
				sprintf(message + strlen(message), "   - %s x %d ea\r\n", item_name, amount);
			else if (strlen(message)<200)
				sprintf(message + strlen(message), "......and more\r\n");
			#endif
			if (i == count-1) {
				if (vsd->vend_loot == ITEMID_ZENY)
					sprintf(message + strlen(message), "Total profit: %s x %d", "Zeny" ,(mailprofit -= mailprofit * (int)(battle_config.vending_tax / 10000.)));
				else
					sprintf(message + strlen(message), "Total profit: %s x %d",itemdb_ename(vsd->vend_loot) ,mailprofit); //No Tax for Items/Cash [Easycore]
			}
			body = message;
			safestrncpy(msg.body, body, MAIL_BODY_LENGTH);
			msg.status = MAIL_NEW;
			msg.type = MAIL_INBOX_NORMAL;
			msg.timestamp = time(NULL);
			if (i==count-1)
				intif_Mail_send(0, &msg);

		}

/**
* Extended Vending system [Lilith]
**/
int clif_vend(struct map_session_data *sd, int skill_lv) {

	nullpo_ret( sd );

	int fd = sd->fd;

	if( !session_isActive( fd ) ){
		return 0;
	}

	WFIFOHEAD( fd, sizeof( struct PACKET_ZC_MAKINGARROW_LIST ) + (ARRAYLENGTH(item_vend)+2) * sizeof( struct PACKET_ZC_MAKINGARROW_LIST_sub ) );
	struct PACKET_ZC_MAKINGARROW_LIST *p = (struct PACKET_ZC_MAKINGARROW_LIST *)WFIFOP( fd, 0 );
	p->packetType = HEADER_ZC_MAKINGARROW_LIST;

	int i, count = 0;
	if (battle_config.item_zeny && itemdb_exists(battle_config.item_zeny) ) {
		p->items[count].itemId = client_nameid(battle_config.item_zeny);
		count++;
	}

	if (battle_config.item_cash && itemdb_exists(battle_config.item_cash) ) {
		p->items[count].itemId = client_nameid(battle_config.item_cash);
		count++;
	}

	for ( i = 0; i < ARRAYLENGTH(item_vend); i++) {
		struct item_data* item;
		t_itemid nameid = item_vend[i].itemid;

		if( nameid != battle_config.item_zeny && nameid != battle_config.item_cash && (item = itemdb_exists(nameid)) ) {
			p->items[count].itemId = client_nameid(nameid);
			count++;
		}
	}

	p->packetLength = sizeof( struct PACKET_ZC_MAKINGARROW_LIST ) + count * sizeof( struct PACKET_ZC_MAKINGARROW_LIST_sub );
	WFIFOSET( fd, p->packetLength );

	if( count > 0 ){
		sd->menuskill_id = MC_VENDING;
		sd->menuskill_val = skill_lv;
	}
	else {
		clif_skill_fail(sd, MC_VENDING, USESKILL_FAIL_LEVEL, 0);
		return 0;
	}
	return 1;
}
